<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>okclouder</title>
  
  <subtitle>okclouder 的博客</subtitle>
  <link href="https://www.okclouder.cn/atom.xml" rel="self"/>
  
  <link href="https://www.okclouder.cn/"/>
  <updated>2020-11-19T15:48:32.181Z</updated>
  <id>https://www.okclouder.cn/</id>
  
  <author>
    <name>okclouder</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://www.okclouder.cn/2020/11/19/gradle-version-optimize/"/>
    <id>https://www.okclouder.cn/2020/11/19/gradle-version-optimize/</id>
    <published>2020-11-19T15:48:32.181Z</published>
    <updated>2020-11-19T15:48:32.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-Gradle-版本参数优化"><a href="#Android-Gradle-版本参数优化" class="headerlink" title="Android Gradle 版本参数优化"></a>Android Gradle 版本参数优化</h1><p>在 Gradle 项目结构中，每一个 Module 都对应一个 build.gradle。有时每个 Module 都会需要配置相同的版本号或者相同的版本依赖。为了解决相同参数重复配置的问题，可以在项目的根目录下增加一个公用的配置文件 common_config.gradle，在公用配置文件提供 Android app 模块、Android library 模块、java library 模块的公用配置。</p><h2 id="common-config-gradle"><a href="#common-config-gradle" class="headerlink" title="common_config.gradle"></a>common_config.gradle</h2><p>每一个模块的 build.gradle 都对应一个 project 对象，可以将 project 传递给 common_config 定义的 setAppDefaultConfig 闭包，从而实现参数配置。common_config.gradle 可以根据具体情况修改，如果项目不使用 kotlin，可以在 common_config 去掉 kotlin 依赖。</p><p>common_config.gradle 如下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">project</span>.ext &#123;</span><br><span class="line"></span><br><span class="line">    versions = [</span><br><span class="line">            <span class="string">&quot;compileSdkVersion&quot;</span>: <span class="number">29</span>,</span><br><span class="line">            <span class="string">&quot;buildToolsVersion&quot;</span>: <span class="string">&quot;29.0.3&quot;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;minSdkVersion&quot;</span>    : <span class="number">19</span>,</span><br><span class="line">            <span class="string">&quot;targetSdkVersion&quot;</span> : <span class="number">29</span>,</span><br><span class="line">            <span class="string">&quot;versionCode&quot;</span>      : <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;versionName&quot;</span>      : <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;junit&quot;</span>: <span class="string">&quot;4.13&quot;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;kotlin&quot;</span>: <span class="string">&quot;1.3.72&quot;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    dependencieLibs = [</span><br><span class="line">            <span class="string">&quot;appcompat&quot;</span>         : <span class="string">&quot;androidx.appcompat:appcompat:1.1.0&quot;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// kotlin</span></span><br><span class="line">            <span class="string">&quot;kotlin-stdlib-jdk7&quot;</span>: <span class="string">&quot;org.jetbrains.kotlin:kotlin-stdlib-jdk7:$&#123;versions[&quot;</span>kotlin<span class="string">&quot;]&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;kotlin-reflect&quot;</span>    : <span class="string">&quot;org.jetbrains.kotlin:kotlin-reflect:$&#123;versions[&quot;</span>kotlin<span class="string">&quot;]&#125;&quot;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// test</span></span><br><span class="line">            <span class="string">&quot;junit&quot;</span>             : <span class="string">&quot;junit:junit:$&#123;versions[&quot;</span>junit<span class="string">&quot;]&#125;&quot;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    setAppDefaultConfig = &#123; extension -&gt;</span><br><span class="line">        extension.apply plugin: <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line">        extension.apply plugin: <span class="string">&#x27;kotlin-android&#x27;</span></span><br><span class="line">        extension.<span class="keyword">description</span> <span class="string">&#x27;app&#x27;</span></span><br><span class="line"></span><br><span class="line">        setAndroidConfig extension.android</span><br><span class="line"></span><br><span class="line">        setDependencies extension.<span class="keyword">dependencies</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setLibDefaultConfig = &#123; extension -&gt;</span><br><span class="line">        extension.apply plugin: <span class="string">&#x27;com.android.library&#x27;</span></span><br><span class="line">        extension.apply plugin: <span class="string">&#x27;kotlin-android&#x27;</span></span><br><span class="line">        extension.<span class="keyword">description</span> <span class="string">&#x27;lib&#x27;</span></span><br><span class="line"></span><br><span class="line">        setAndroidConfig extension.android</span><br><span class="line"></span><br><span class="line">        setDependencies extension.<span class="keyword">dependencies</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setJavaLibDefaultConfig = &#123; extension -&gt;</span><br><span class="line">        extension.apply plugin: <span class="string">&#x27;java-library&#x27;</span></span><br><span class="line">        extension.apply plugin: <span class="string">&#x27;kotlin&#x27;</span></span><br><span class="line">        extension.<span class="keyword">description</span> <span class="string">&#x27;javalib&#x27;</span></span><br><span class="line"></span><br><span class="line">        setDependencies extension.<span class="keyword">dependencies</span></span><br><span class="line"></span><br><span class="line">        extension.<span class="keyword">sourceCompatibility</span> = JavaVersion.VERSION_1_8</span><br><span class="line">        extension.<span class="keyword">targetCompatibility</span> = JavaVersion.VERSION_1_8</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setAndroidConfig = &#123; extension -&gt;</span><br><span class="line">        extension.compileSdkVersion versions[<span class="string">&#x27;compileSdkVersion&#x27;</span>]</span><br><span class="line">        extension.buildToolsVersion versions[<span class="string">&#x27;buildToolsVersion&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        extension.defaultConfig &#123;</span><br><span class="line">            minSdkVersion versions[<span class="string">&#x27;minSdkVersion&#x27;</span>]</span><br><span class="line">            targetSdkVersion versions[<span class="string">&#x27;targetSdkVersion&#x27;</span>]</span><br><span class="line">            versionCode versions[<span class="string">&#x27;versionCode&#x27;</span>]</span><br><span class="line">            versionName versions[<span class="string">&#x27;versionName&#x27;</span>]</span><br><span class="line"></span><br><span class="line">            testInstrumentationRunner <span class="string">&quot;androidx.test.runner.AndroidJUnitRunner&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        extension.compileOptions &#123;</span><br><span class="line">            <span class="keyword">targetCompatibility</span> = JavaVersion.VERSION_1_8</span><br><span class="line">            <span class="keyword">sourceCompatibility</span> = JavaVersion.VERSION_1_8</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        extension.kotlinOptions &#123;</span><br><span class="line">            jvmTarget = JavaVersion.VERSION_1_8</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setDependencies = &#123; extension -&gt;</span><br><span class="line">        extension.implementation <span class="keyword">fileTree</span>(<span class="keyword">include</span>: [<span class="string">&#x27;*.jar&#x27;</span>], dir: <span class="string">&#x27;libs&#x27;</span>)</span><br><span class="line">        extension.implementation dependencieLibs[<span class="string">&#x27;kotlin-stdlib-jdk7&#x27;</span>]</span><br><span class="line">        extension.implementation dependencieLibs[<span class="string">&#x27;appcompat&#x27;</span>]</span><br><span class="line">        extension.testImplementation dependencieLibs[<span class="string">&#x27;junit&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><h3 id="versions"><a href="#versions" class="headerlink" title="versions"></a>versions</h3><p>版本号定义</p><h3 id="dependencieLibs"><a href="#dependencieLibs" class="headerlink" title="dependencieLibs"></a>dependencieLibs</h3><p>所有模块都用到的公有依赖</p><h3 id="setAppDefaultConfig"><a href="#setAppDefaultConfig" class="headerlink" title="setAppDefaultConfig"></a>setAppDefaultConfig</h3><p>Android application 模块的配置闭包</p><h3 id="setLibDefaultConfig"><a href="#setLibDefaultConfig" class="headerlink" title="setLibDefaultConfig"></a>setLibDefaultConfig</h3><p>Android library 模块的配置闭包</p><h3 id="setJavaLibDefaultConfig"><a href="#setJavaLibDefaultConfig" class="headerlink" title="setJavaLibDefaultConfig"></a>setJavaLibDefaultConfig</h3><p>Java library 模块的配置闭包</p><h3 id="setAndroidConfig"><a href="#setAndroidConfig" class="headerlink" title="setAndroidConfig"></a>setAndroidConfig</h3><p>android 的 配置闭包，也就是 build.gradle 的 android {} 配置</p><h3 id="setDependencies"><a href="#setDependencies" class="headerlink" title="setDependencies"></a>setDependencies</h3><p>依赖的配置闭包，也就是 dependencies {} 配置</p><h2 id="专有配置"><a href="#专有配置" class="headerlink" title="专有配置"></a>专有配置</h2><p>如果某个模块除了公有配置之外，还有它自己所需的依赖，可以在 setAppDefaultConfig 之后添加专有的 dependencies {} 依赖。</p><p>app 模块的 build.gradle 如下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="keyword">from</span>: <span class="string">&quot;$&#123;rootProject.rootDir&#125;/common_config.gradle&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>.ext.setAppDefaultConfig <span class="keyword">project</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="string">&#x27;androidx.recyclerview:recyclerview:1.1.0&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Android-Gradle-版本参数优化&quot;&gt;&lt;a href=&quot;#Android-Gradle-版本参数优化&quot; class=&quot;headerlink&quot; title=&quot;Android Gradle 版本参数优化&quot;&gt;&lt;/a&gt;Android Gradle 版本参数优化&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.okclouder.cn/2020/11/19/gradle-android-transform/"/>
    <id>https://www.okclouder.cn/2020/11/19/gradle-android-transform/</id>
    <published>2020-11-19T15:48:32.180Z</published>
    <updated>2020-11-19T15:48:32.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gradle-Android-Transform-API-编译修改-class"><a href="#Gradle-Android-Transform-API-编译修改-class" class="headerlink" title="Gradle Android Transform API 编译修改 class"></a>Gradle Android Transform API 编译修改 class</h1><h2 id="Gradle-插件"><a href="#Gradle-插件" class="headerlink" title="Gradle 插件"></a>Gradle 插件</h2><p>Android 的 Gradle 插件一般用作 Android 工程的编译构建流程。以 Android app 模块的 build.gradle 为例：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.android.application&#x27;</span></span><br></pre></td></tr></table></figure><p>‘com.android.application’ 插件是 Android Gradle Plugin(AGP) 提供的用作 app 编译的插件。</p><p>Android library 模块也提供了类似的插件：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.android.library&#x27;</span></span><br></pre></td></tr></table></figure><p>‘com.android.library’ 插件是 Android Gradle Plugin(AGP) 提供的用作 library 编译的插件。</p><p>要使用这些插件，必须先在根目录下的 build.gradle 添加编译依赖：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    ...</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&#x27;com.android.tools.build:gradle:4.0.2&#x27;</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不清楚如何编写一个 Gradle 插件，可以先看 <a href="https://blog.csdn.net/caoshen2014/article/details/102528973">Gradle 插件基础</a>，了解如何写一个 Gradle 插件，并且应用到 Android 项目。</p><h2 id="Transform-API"><a href="#Transform-API" class="headerlink" title="Transform API"></a>Transform API</h2><p>通常我们编写 Gradle 插件是为了对原有编译流程做修改，或者修改项目源码中某种类型的类实现做统一的编译期修改。</p><p>例如路由自动注册、项目无痕埋点、全局性能监控等使用场景。如果手动对代码的每一处都做修改，不仅工作量大，而且容易遗漏出错。当项目规模增大，涉及的开发人员变多，还会出现信息不同步、修改不一致等问题。</p><p>要修改原有编译流程，一般就会在自定义的 Gradle 插件中注册 Transform API。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoPlugin</span>: <span class="type">Plugin</span>&lt;<span class="type">Project</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">apply</span><span class="params">(target: <span class="type">Project</span>)</span></span> &#123;</span><br><span class="line">        target.extensions.findByType(AppExtension::<span class="keyword">class</span>.java)?.run &#123;</span><br><span class="line">            registerTransform(AutoRegisterTransform(target))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Transform 是 Android build api 的一部分，它主要用来处理编译的中间过程。每一个 Transform 对应一个 Gradle task，一个 Transform 的输出会变为下一个 Transform 的输入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.android.build.api.transform;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A Transform that processes intermediary build artifacts.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;For each added transform, a new task is created. The action of adding a transform takes</span></span><br><span class="line"><span class="comment"> * care of handling dependencies between the tasks. This is done based on what the transform</span></span><br><span class="line"><span class="comment"> * processes. The output of the transform becomes consumable by other transforms and these</span></span><br><span class="line"><span class="comment"> * tasks get automatically linked together.</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;MethodMayBeStatic&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Transform</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写自定义的 Transfrom 时，一般需要重写 getName、getInputTypes、getScopes、isIncremental、transform 5 个方法。</p><h3 id="getName"><a href="#getName" class="headerlink" title="getName"></a>getName</h3><p>getName() 用来指明 Transform 的名称。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getName</span><span class="params">()</span></span>: String = <span class="string">&quot;AutoRegisterTransform&quot;</span></span><br></pre></td></tr></table></figure><h3 id="getInputTypes"><a href="#getInputTypes" class="headerlink" title="getInputTypes"></a>getInputTypes</h3><p>getInputTypes() 用来指明 Transform 的输入类型。常用的输入类型可以是 Classes 、Resources。 Classes 是 Jar 文件或者目录里面的 class 字节码。 Resources 是标准的 Java 资源文件。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输入文件的类型</span></span><br><span class="line"><span class="comment"> * 可供我们去处理的有两种类型, 分别是编译后的java代码, 以及资源文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getInputTypes</span><span class="params">()</span></span>: MutableSet&lt;QualifiedContent.ContentType&gt; = TransformManager.CONTENT_CLASS</span><br></pre></td></tr></table></figure><p>TransformManager 的 getTaskNamePrefix 用来生成 transform task 的前缀。Task 的名称与输入的 InputTypes 以及 Transform 名称相关。</p><p>如果 Transform 的名称是 DemoTransform，那么编译过程新增的 task 就有 transformClassesWithDemoTransformForDebug。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">getTaskNamePrefix</span><span class="params">(<span class="meta">@NonNull</span> Transform transform)</span> </span>&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="number">100</span>);</span><br><span class="line">    sb.append(<span class="string">&quot;transform&quot;</span>);</span><br><span class="line"></span><br><span class="line">    sb.append(</span><br><span class="line">            transform</span><br><span class="line">                    .getInputTypes()</span><br><span class="line">                    .stream()</span><br><span class="line">                    .map(</span><br><span class="line">                            inputType -&gt;</span><br><span class="line">                                    CaseFormat.UPPER_UNDERSCORE.to(</span><br><span class="line">                                            CaseFormat.UPPER_CAMEL, inputType.name()))</span><br><span class="line">                    .sorted() <span class="comment">// Keep the order stable.</span></span><br><span class="line">                    .collect(Collectors.joining(<span class="string">&quot;And&quot;</span>)));</span><br><span class="line">    sb.append(<span class="string">&quot;With&quot;</span>);</span><br><span class="line">    StringHelper.appendCapitalized(sb, transform.getName());</span><br><span class="line">    sb.append(<span class="string">&quot;For&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getScopes"><a href="#getScopes" class="headerlink" title="getScopes"></a>getScopes</h3><p>getScopes 用来指明 Transform 作用的范围。常用 Transform 的范围有 SCOPE_FULL_PROJECT。SCOPE_FULL_PROJECT 是 PROJECT、SUB_PROJECTS、EXTERNAL_LIBRARIES 的集合，分别表示当前模块，依赖的子模块、外部依赖。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指定作用范围</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getScopes</span><span class="params">()</span></span>: MutableSet&lt;<span class="keyword">in</span> QualifiedContent.Scope&gt; = TransformManager.SCOPE_FULL_PROJECT</span><br></pre></td></tr></table></figure><h3 id="isIncremental"><a href="#isIncremental" class="headerlink" title="isIncremental"></a>isIncremental</h3><p>isIncremental() 用来指明是否开启增量编译。开启增量编译后，只会处理发生变更的文件，加快编译速度。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否支持增量</span></span><br><span class="line"><span class="comment"> * 如果支持增量执行, 则变化输入内容可能包含 修改/删除/添加 文件的列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">isIncremental</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><p>transform(transformInvocation: TransformInvocation) 用来指明编译的具体动作。如果 transform 什么都不做，那么生成的 APK 里面是没有 dex 文件的。因此至少需要将 Transform 的输入复制到输出目录。同时可以遍历扫描每一个 class 文件，针对某一类文件做特殊处理，这种操作就是字节码插桩。</p><p>因为 Transform 的基础操作比如文件的复制、删除等都是通用操作，可以提取一个通用的 BaseTransform，并且添加基础操作到 transform 方法。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTransform</span> : <span class="type">Transform</span></span>() &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * transform的执行主函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">transform</span><span class="params">(transformInvocation: <span class="type">TransformInvocation</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> outputProvider = transformInvocation.outputProvider</span><br><span class="line">        println(<span class="string">&quot;有没有增量编译<span class="subst">$&#123;transformInvocation.isIncremental&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> (input <span class="keyword">in</span> transformInvocation.inputs) &#123;</span><br><span class="line">            with(input) &#123;</span><br><span class="line">                <span class="comment">// 输入源为jar</span></span><br><span class="line">                jarInputs.forEach &#123; jarInput -&gt;</span><br><span class="line">                    <span class="keyword">val</span> inputJar = jarInput.file</span><br><span class="line">                    <span class="keyword">val</span> outputJar = outputProvider.getContentLocation(</span><br><span class="line">                        jarInput.name,</span><br><span class="line">                        jarInput.contentTypes,</span><br><span class="line">                        jarInput.scopes,</span><br><span class="line">                        Format.JAR</span><br><span class="line">                    )</span><br><span class="line">                    <span class="keyword">if</span> (transformInvocation.isIncremental) &#123;</span><br><span class="line">                        <span class="keyword">when</span> (jarInput.status) &#123;</span><br><span class="line">                            NOTCHANGED -&gt; &#123;</span><br><span class="line">                            &#125;</span><br><span class="line">                            ADDED, CHANGED -&gt; transformJar(inputJar, outputJar)</span><br><span class="line">                            REMOVED -&gt; FileUtils.delete(outputJar)</span><br><span class="line">                            <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        transformJar(inputJar, outputJar)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 输入源为文件夹</span></span><br><span class="line">                directoryInputs.forEach &#123; di -&gt;</span><br><span class="line">                    <span class="keyword">val</span> inputDir = di.file</span><br><span class="line">                    <span class="keyword">val</span> outputDir = outputProvider.getContentLocation(</span><br><span class="line">                        di.name,</span><br><span class="line">                        di.contentTypes,</span><br><span class="line">                        di.scopes,</span><br><span class="line">                        Format.DIRECTORY</span><br><span class="line">                    )</span><br><span class="line">                    <span class="keyword">if</span> (transformInvocation.isIncremental) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (entry <span class="keyword">in</span> di.changedFiles.entries) &#123;</span><br><span class="line">                            <span class="keyword">val</span> inputFile = entry.key</span><br><span class="line">                            <span class="keyword">when</span> (entry.value) &#123;</span><br><span class="line">                                NOTCHANGED -&gt; &#123;</span><br><span class="line">                                &#125;</span><br><span class="line">                                ADDED, CHANGED -&gt; &#123;</span><br><span class="line">                                    <span class="keyword">if</span> (!inputFile.isDirectory &amp;&amp; inputFile.name.endsWith(</span><br><span class="line">                                            SdkConstants.DOT_CLASS</span><br><span class="line">                                        )</span><br><span class="line">                                    ) &#123;</span><br><span class="line">                                        <span class="keyword">val</span> <span class="keyword">out</span> = toOutputFile(outputDir, inputDir, inputFile)</span><br><span class="line">                                        transformFile(inputFile, <span class="keyword">out</span>)</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                                REMOVED -&gt; &#123;</span><br><span class="line">                                    <span class="keyword">val</span> outputFile = toOutputFile(outputDir, inputDir, inputFile)</span><br><span class="line">                                    FileUtils.deleteIfExists(outputFile)</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        FileUtils.getAllFiles(inputDir)</span><br><span class="line">                            .filter &#123;</span><br><span class="line">                                <span class="literal">true</span> == it?.name?.endsWith(SdkConstants.DOT_CLASS)</span><br><span class="line">                            &#125;.forEach &#123; fileIn -&gt;</span><br><span class="line">                                <span class="keyword">val</span> <span class="keyword">out</span> = toOutputFile(outputDir, inputDir, fileIn)</span><br><span class="line">                                transformFile(fileIn, <span class="keyword">out</span>)</span><br><span class="line">                            &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ASM-修改字节码"><a href="#ASM-修改字节码" class="headerlink" title="ASM 修改字节码"></a>ASM 修改字节码</h2><p>修改字节码的方式有很多种，这里介绍使用 <a href="https://asm.ow2.io/">ASM</a> 修改字节码的方式。相比其他方式，ASM 修改效率很高。</p><p>在 build.gradle 引入 ASM 依赖：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&#x27;org.ow2.asm:asm:6.0&#x27;</span></span><br></pre></td></tr></table></figure><p>因为字节码的可读性较低，如果不熟悉 ASM API 和字节码的生成方式，可以先用 Java 编写想要转换的代码，然后使用一个 IDEA 插件 <a href="https://plugins.jetbrains.com/plugin/5918-asm-bytecode-outline">ASM Bytecode Outline</a>，转换 Java 代码到 ASM 代码。</p><p>以如下 Java 代码为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getAllRoutes</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以 ASM Bytecode Outline 插件转换的 ASMified 代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, <span class="string">&quot;getAllRoutes&quot;</span>, <span class="string">&quot;()Ljava/util/List;&quot;</span>, <span class="string">&quot;()Ljava/util/List&lt;Ljava/lang/String;&gt;;&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">    mv.visitCode();</span><br><span class="line">    Label l0 = <span class="keyword">new</span> Label();</span><br><span class="line">    mv.visitLabel(l0);</span><br><span class="line">    mv.visitLineNumber(<span class="number">10</span>, l0);</span><br><span class="line">    mv.visitTypeInsn(NEW, <span class="string">&quot;java/util/ArrayList&quot;</span>);</span><br><span class="line">    mv.visitInsn(DUP);</span><br><span class="line">    mv.visitMethodInsn(INVOKESPECIAL, <span class="string">&quot;java/util/ArrayList&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">    mv.visitVarInsn(ASTORE, <span class="number">0</span>);</span><br><span class="line">    Label l1 = <span class="keyword">new</span> Label();</span><br><span class="line">    mv.visitLabel(l1);</span><br><span class="line">    mv.visitLineNumber(<span class="number">11</span>, l1);</span><br><span class="line">    mv.visitVarInsn(ALOAD, <span class="number">0</span>);</span><br><span class="line">    mv.visitInsn(ARETURN);</span><br><span class="line">    Label l2 = <span class="keyword">new</span> Label();</span><br><span class="line">    mv.visitLabel(l2);</span><br><span class="line">    mv.visitLocalVariable(<span class="string">&quot;list&quot;</span>, <span class="string">&quot;Ljava/util/List;&quot;</span>, <span class="string">&quot;Ljava/util/List&lt;Ljava/lang/String;&gt;;&quot;</span>, l1, l2, <span class="number">0</span>);</span><br><span class="line">    mv.visitMaxs(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    mv.visitEnd();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们需要生成 Java 代码对应的 .class 字节码时，使用 ClassWriter 写入 ASMified 得到的代码，最后将 ClassWriter 转换成字节数组，并作为输入流写入文件即可。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改注册类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">modifyRegisterByte</span><span class="params">(ins: <span class="type">InputStream</span>)</span></span>: ByteArray &#123;</span><br><span class="line">    <span class="keyword">val</span> cw = ClassWriter(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">val</span> cr = ClassReader(ins)</span><br><span class="line">    <span class="keyword">val</span> cn = ClassNode()</span><br><span class="line">    cr.accept(cn, <span class="number">0</span>)</span><br><span class="line">    cn.methods.removeIf &#123; it.name == <span class="string">&quot;getAllRoutes&quot;</span> &amp;&amp; <span class="string">&quot;()Ljava/util/List;&quot;</span> == it.desc &#125;</span><br><span class="line">    <span class="keyword">val</span> mv = cn.visitMethod(</span><br><span class="line">        ACC_PUBLIC + ACC_STATIC,</span><br><span class="line">        <span class="string">&quot;getAllRoutes&quot;</span>,</span><br><span class="line">        <span class="string">&quot;()Ljava/util/List;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;()Ljava/util/List&lt;Ljava/lang/String;&gt;;&quot;</span>,</span><br><span class="line">        <span class="literal">null</span></span><br><span class="line">    )</span><br><span class="line">    with(mv) &#123;</span><br><span class="line">        <span class="keyword">val</span> labels = arrayListOf&lt;Label&gt;()</span><br><span class="line">        visitCode()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> label = Label()</span><br><span class="line">        visitLabel(label)</span><br><span class="line">        visitTypeInsn(NEW, <span class="string">&quot;java/util/ArrayList&quot;</span>)</span><br><span class="line">        visitInsn(DUP)</span><br><span class="line">        visitMethodInsn(INVOKESPECIAL, <span class="string">&quot;java/util/ArrayList&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="literal">false</span>)</span><br><span class="line">        visitVarInsn(ASTORE, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    cn.accept(cw)</span><br><span class="line">    <span class="keyword">return</span> cw.toByteArray()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改目标 class 文件：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">modifyTargetClass</span><span class="params">(it: <span class="type">File</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 如果找到的目标文件是 .class 文件（对 ModuleRegister 来说，它是 .class 文件）</span></span><br><span class="line">    <span class="keyword">if</span> (it.name.endsWith(SdkConstants.DOT_CLASS)) &#123;</span><br><span class="line">        <span class="keyword">val</span> rewrite = modifyRegisterByte((it.inputStream()))</span><br><span class="line">        FileOutputStream(it).write(rewrite)</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="class-文件读写"><a href="#class-文件读写" class="headerlink" title="class 文件读写"></a>class 文件读写</h2><p>对 Transform API 而言，修改字节码有两种类型：</p><ol><li>直接修改文件夹的 .class 文件。对应 Transform 的 directoryInputs</li><li>修改 .jar 文件里面的 .class 文件。对应 Transform 的 jarInputs</li></ol><h3 id="修改文件夹的-class-字节码"><a href="#修改文件夹的-class-字节码" class="headerlink" title="修改文件夹的 .class 字节码"></a>修改文件夹的 .class 字节码</h3><p>如果修改 .class 文件，可以使用 FileInputStream 和 FileOutputStream。首先读取文件，然后将 ASM 转换的 ByteArray 写入到文件。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoRegisterTransform</span></span>(<span class="keyword">val</span> p: Project): DemoTransform() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">modifyTargetClass</span><span class="params">(it: <span class="type">File</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 如果找到的目标文件是 .class 文件</span></span><br><span class="line">        <span class="keyword">if</span> (it.name.endsWith(SdkConstants.DOT_CLASS)) &#123;</span><br><span class="line">            <span class="keyword">val</span> rewrite = modifyRegisterByte((it.inputStream()))</span><br><span class="line">            FileOutputStream(it).write(rewrite)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (it.name.endsWith(SdkConstants.DOT_JAR)) &#123;</span><br><span class="line">            <span class="comment">// 如果找到的目标文件是 .jar 文件。dependencies &#123;&#125;、依赖的 android library 类型 module、</span></span><br><span class="line">            <span class="comment">// 每个 module 的 R 文件打包成的 jar，都属于 .jar 文件</span></span><br><span class="line">            ...   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改-Jar-文件的-class-字节码"><a href="#修改-Jar-文件的-class-字节码" class="headerlink" title="修改 Jar 文件的 .class 字节码"></a>修改 Jar 文件的 .class 字节码</h3><p>如果修改的是 .jar 文件里面的 .class 文件。需要遍历 .jar 文件的每一个 JarEntry，如果发现目标的 .class 文件，就使用 putNextEntry 修改它的内容。</p><p>dealJarFile 用来处理 jar 文件。将参数的 JarFile 作为输出文件，将 JarFile 重命名为 bakJarFile 作为输入文件，遍历 bakJarFile 的每一个 JarEntry。如果发现 JarEntry 的名称和需要替换的类名相同，就使用 ASM 修改它的字节码，然后加以一个新的 JarEntry。否则将原有的 JarEntry 复制到 JarFile。</p><p>为了修改 JarEntry，可以提取一个 addZipEntry 方法。当需要修改字节码时，将 ASM 转换得到的 ByteArray 转换成 ByteArrayInputStream 作为 InputStream 输入；当不需要修改字节码，只复制 JarEntry 时，将 bakJarFile.getInputStream(jarEntry) 作为 InputStream 输入。</p><p>目标文件是 Jar 文件，而且发现 JarEntry 的名称和需要替换的类名相同：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoRegisterTransform</span></span>(<span class="keyword">val</span> p: Project): DemoTransform() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">modifyTargetClass</span><span class="params">(it: <span class="type">File</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 如果找到的目标文件是 .class 文件</span></span><br><span class="line">        <span class="keyword">if</span> (it.name.endsWith(SdkConstants.DOT_CLASS)) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (it.name.endsWith(SdkConstants.DOT_JAR)) &#123;</span><br><span class="line">            <span class="comment">// 如果找到的目标文件是 .jar 文件。dependencies &#123;&#125;、依赖的 android library 类型 module、</span></span><br><span class="line">            <span class="comment">// 每个 module 的 R 文件打包成的 jar，都属于 .jar 文件</span></span><br><span class="line">            ScanHelper.dealJarFile(it) &#123; jarEntry, jos, jarFile -&gt;</span><br><span class="line">                <span class="keyword">val</span> isRegisterClass = jarEntry.name == ScanConstants.AUTOREGISTER</span><br><span class="line">                <span class="keyword">if</span> (isRegisterClass) &#123;</span><br><span class="line">                    println(<span class="string">&quot;modifyTargetClass: isRegisterClass:<span class="subst">$&#123;isRegisterClass&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">val</span> inputStream = jarFile.getInputStream(jarEntry)</span><br><span class="line">                    <span class="keyword">val</span> byteArray = modifyRegisterByte(inputStream)</span><br><span class="line"><span class="comment">//                    jos.putNextEntry(JarEntry(jarEntry.name))</span></span><br><span class="line"><span class="comment">//                    jos.write(byteArray)</span></span><br><span class="line">                    ScanHelper.addZipEntry(jos, JarEntry(jarEntry.name), ByteArrayInputStream(</span><br><span class="line">                        byteArray</span><br><span class="line">                    ))</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    println(<span class="string">&quot;NOT register class:<span class="subst">$&#123;jarEntry.name&#125;</span>&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                isRegisterClass</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标文件是 Jar 文件，而且发现 JarEntry 的名称和需要替换的类名不同：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> ScanHelper &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">dealJarFile</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        jarFile: <span class="type">File</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        callback: (<span class="type">jarEntry</span>: <span class="type">JarEntry</span>, <span class="type">jos</span>: <span class="type">JarOutputStream</span>, <span class="type">jarFile</span>: <span class="type">JarFile</span>) -&gt; <span class="type">Boolean</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> jarAbsolutePath = jarFile.absolutePath</span><br><span class="line">        <span class="keyword">val</span> bakFilePath = jarAbsolutePath.substring(<span class="number">0</span>, jarAbsolutePath.length - <span class="number">4</span>) + <span class="string">&quot;-&quot;</span> +</span><br><span class="line">                System.currentTimeMillis() + SdkConstants.DOT_JAR</span><br><span class="line">        println(<span class="string">&quot;jar absolute path: <span class="subst">$&#123;jarAbsolutePath&#125;</span>, bak file path:<span class="subst">$&#123;bakFilePath&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> bakFile = File(bakFilePath)</span><br><span class="line">        <span class="comment">// JarFile 不是 File 的子类，需要将原始 JarFile(build/javac)，重命名为带时间戳的新 jar。</span></span><br><span class="line">        <span class="comment">// 原有的 jarFile 在磁盘上不再存在</span></span><br><span class="line">        jarFile.renameTo(bakFile)</span><br><span class="line">        <span class="comment">// 获取备份的jar</span></span><br><span class="line">        <span class="keyword">val</span> bakJarFile = JarFile(bakFilePath)</span><br><span class="line">        <span class="keyword">val</span> jos = JarOutputStream(FileOutputStream(jarFile))</span><br><span class="line">        <span class="keyword">for</span> (jarEntry <span class="keyword">in</span> bakJarFile.entries()) &#123;</span><br><span class="line">            println(<span class="string">&quot;name:<span class="subst">$&#123;jarEntry.name&#125;</span>, size:<span class="subst">$&#123;jarEntry.size&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="comment">// 只有找到了目标 class 的情况下才在 callback 方法添加 ZipEntry</span></span><br><span class="line">            <span class="comment">// 否则在这里的 JarOutputStream 添加 ZipEntry</span></span><br><span class="line">            <span class="keyword">if</span> (!callback(jarEntry, jos, bakJarFile)) &#123;</span><br><span class="line">                println(<span class="string">&quot;putNextEntry:<span class="subst">$&#123;jarEntry.name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">val</span> inputStream = bakJarFile.getInputStream(jarEntry)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">val</span> newZipEntry = ZipEntry(jarEntry.name)</span><br><span class="line"></span><br><span class="line">                addZipEntry(jos, newZipEntry, inputStream)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        with(jos) &#123;</span><br><span class="line">            flush()</span><br><span class="line">            finish()</span><br><span class="line">            close()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭 jarFile</span></span><br><span class="line">        bakJarFile.close()</span><br><span class="line">        <span class="comment">// 删除备份文件</span></span><br><span class="line">        bakFile.delete()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">addZipEntry</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        jos: <span class="type">JarOutputStream</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        zipEntry: <span class="type">ZipEntry</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        inputStream: <span class="type">InputStream</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> &#123;</span><br><span class="line">        jos.putNextEntry(zipEntry)</span><br><span class="line">        <span class="keyword">val</span> buffer = ByteArray(<span class="number">16384</span>)</span><br><span class="line">        <span class="keyword">var</span> length: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            length = inputStream.read(buffer);</span><br><span class="line">            <span class="keyword">if</span> (length == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            jos.write(buffer, <span class="number">0</span>, length)</span><br><span class="line">            jos.flush()</span><br><span class="line">        &#125; <span class="keyword">while</span> (length != -<span class="number">1</span>);</span><br><span class="line">        inputStream.close()</span><br><span class="line">        jos.closeEntry()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.wanandroid.com/wenda/show/15215">每日一问 | 玩转 Gradle，可不能不熟悉 Transform，那么，我要开始问了。</a></p><p><a href="https://yutiantina.github.io/2019/04/24/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3TransformApi/">深入了解TransformApi</a></p><p><a href="https://github.com/YuTianTina/TransformDemo">TransformDemo</a></p><p><a href="https://github.com/AndroidAdvanceWithGeektime/Chapter-ASM">Chapter-ASM</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Gradle-Android-Transform-API-编译修改-class&quot;&gt;&lt;a href=&quot;#Gradle-Android-Transform-API-编译修改-class&quot; class=&quot;headerlink&quot; title=&quot;Gradle Android</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.okclouder.cn/2020/11/19/android-proguard/"/>
    <id>https://www.okclouder.cn/2020/11/19/android-proguard/</id>
    <published>2020-11-19T15:48:32.179Z</published>
    <updated>2020-11-19T15:48:32.179Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-Proguard-混淆"><a href="#Android-Proguard-混淆" class="headerlink" title="Android Proguard 混淆"></a>Android Proguard 混淆</h1><p>Android 项目可以在 build.gradle 开启 proguard 代码混淆。</p><h2 id="开启混淆的好处"><a href="#开启混淆的好处" class="headerlink" title="开启混淆的好处"></a>开启混淆的好处</h2><ol><li>降低代码的可读性，缩短类和成员的名称，使反编译后的代码不容易被其他人阅读或破解。比如 APP \ SDK 对外发布正式版本时，通常需要做代码混淆。</li><li>代码压缩。开启混淆后，项目中没有被任何地方执行到的代码会被 Proguard 优化，减少 APP\SDK 包体积。</li><li>资源压缩。开启混淆后，项目中没有被使用的图片、字符串、布局等资源会从项目中移出，减少 APP\SDK 包体积。</li></ol><h2 id="如何开启混淆"><a href="#如何开启混淆" class="headerlink" title="如何开启混淆"></a>如何开启混淆</h2><p>Android 项目可以在模块的 build.gradle 文件配置开启混淆。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">    debug &#123;</span><br><span class="line">        minifyEnabled false</span><br><span class="line">        shrinkResources false</span><br><span class="line">        proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    release &#123;</span><br><span class="line">        minifyEnabled true</span><br><span class="line">        shrinkResources true</span><br><span class="line">        proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>minifyEnabled true 表示开启混淆。shrinkResources 表示资源压缩。</p><p>需要注意的是 Library 项目无法使用 shrinkResources。shrinkResources 只能用于 APK 资源压缩。这可能是因为工具无法判断 Library 中的资源是否会被其他模块使用到，所以只有在构建整个 APK 的时候才能知道哪些资源是无用资源，才可以启用资源压缩。</p><h2 id="编写-Proguard-混淆规则"><a href="#编写-Proguard-混淆规则" class="headerlink" title="编写 Proguard 混淆规则"></a>编写 Proguard 混淆规则</h2><p>混淆规则有 2 部分组成，Android SDK 自带的默认规则 proguard-android.txt 和项目自定义的 proguard-rules.pro。</p><h3 id="自定义规则"><a href="#自定义规则" class="headerlink" title="自定义规则"></a>自定义规则</h3><p>项目自定义的 proguard-rules.pro。</p><p>不混淆四大组件和 Application，在 AndroidManifest.xml 注册的组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-keep public class * extends android.app.Activity</span><br><span class="line">-keep public class * extends android.app.Application</span><br><span class="line">-keep public class * extends android.app.Service</span><br><span class="line">-keep public class * extends android.content.BroadcastReceiver</span><br><span class="line">-keep public class * extends android.content.ContentProvider</span><br></pre></td></tr></table></figure><p>不混淆 ww 目录下的所有类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-keep public class xx.yy.zz.ww.* &#123;*;&#125;</span><br></pre></td></tr></table></figure><p>不混淆 ww 目录下的所有子目录和类，循环子目录下的所有内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-keep public class xx.yy.zz.ww.** &#123;*;&#125;</span><br></pre></td></tr></table></figure><p>不混淆 AA 类的名称，但是混淆 AA 类的成员：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-keep public class xx.yy.zz.ww.AA</span><br></pre></td></tr></table></figure><p>不混淆 AA 类的名称和成员：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-keep public class xx.yy.zz.ww.AA &#123;*;&#125;</span><br></pre></td></tr></table></figure><p>不混淆 AA 类的某个 public 方法，可能被反射调用或者被 Native 代码回调的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-keep class xx.yy.zz.ww.AA &#123;</span><br><span class="line">    public void callbackByNavtiveMethodXXXX();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不混淆 Serializable 子类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-keepclassmembers class * implements java.io.Serializable &#123;</span><br><span class="line">    static final long serialVersionUID;</span><br><span class="line">    private static final java.io.ObjectStreamField[] serialPersistentFields;</span><br><span class="line">    private void writeObject(java.io.ObjectOutputStream);</span><br><span class="line">    private void readObject(java.io.ObjectInputStream);</span><br><span class="line">    java.lang.Object writeReplace();</span><br><span class="line">    java.lang.Object readResolve();</span><br><span class="line">    public &lt;fields&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="系统规则"><a href="#系统规则" class="headerlink" title="系统规则"></a>系统规则</h3><p>系统默认的 proguard-android.txt，位于 $ANDROID_HOME\tools\proguard\proguard-android.txt。在 Android Gradle Plugin (AGP)2.2 以上版本会使用编译期间生成的 proguard-android.txt，比如 build\intermediates\proguard-files\proguard-android.txt-3.3.2，而不是 SDK 里面的 proguard-android.txt。</p><p>proguard-android.txt-3.3.2 的规则如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"># This is a configuration file for ProGuard.</span><br><span class="line"># http:&#x2F;&#x2F;proguard.sourceforge.net&#x2F;index.html#manual&#x2F;usage.html</span><br><span class="line">#</span><br><span class="line"># Starting with version 2.2 of the Android plugin for Gradle, this file is distributed together with</span><br><span class="line"># the plugin and unpacked at build-time. The files in $ANDROID_HOME are no longer maintained and</span><br><span class="line"># will be ignored by new version of the Android plugin for Gradle.</span><br><span class="line"></span><br><span class="line"># Optimization is turned off by default. Dex does not like code run</span><br><span class="line"># through the ProGuard optimize steps (and performs some</span><br><span class="line"># of these optimizations on its own).</span><br><span class="line"># Note that if you want to enable optimization, you cannot just</span><br><span class="line"># include optimization flags in your own project configuration file;</span><br><span class="line"># instead you will need to point to the</span><br><span class="line"># &quot;proguard-android-optimize.txt&quot; file instead of this one from your</span><br><span class="line"># project.properties file.</span><br><span class="line"># 不启用优化</span><br><span class="line">-dontoptimize</span><br><span class="line"># 混淆时不使用大小写混写的类名</span><br><span class="line">-dontusemixedcaseclassnames</span><br><span class="line"># 不跳过库中非 public 的类</span><br><span class="line">-dontskipnonpubliclibraryclasses</span><br><span class="line"># 打印处理日志</span><br><span class="line">-verbose</span><br><span class="line"></span><br><span class="line"># Preserve some attributes that may be required for reflection.</span><br><span class="line"># 保留注解、泛型、内部类、封闭方法</span><br><span class="line">-keepattributes *Annotation*,Signature,InnerClasses,EnclosingMethod</span><br><span class="line"># 不混淆指定的类</span><br><span class="line">-keep public class com.google.vending.licensing.ILicensingService</span><br><span class="line">-keep public class com.android.vending.licensing.ILicensingService</span><br><span class="line">-keep public class com.google.android.vending.licensing.ILicensingService</span><br><span class="line"># 不打印潜在的错误或者疏漏的注释</span><br><span class="line">-dontnote com.android.vending.licensing.ILicensingService</span><br><span class="line">-dontnote com.google.vending.licensing.ILicensingService</span><br><span class="line">-dontnote com.google.android.vending.licensing.ILicensingService</span><br><span class="line"></span><br><span class="line"># For native methods, see http:&#x2F;&#x2F;proguard.sourceforge.net&#x2F;manual&#x2F;examples.html#native</span><br><span class="line"># 不混淆 Native 方法</span><br><span class="line">-keepclasseswithmembernames class * &#123;</span><br><span class="line">    native &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Keep setters in Views so that animations can still work.</span><br><span class="line"># 不混淆 View 子类的 set 和 get 方法</span><br><span class="line">-keepclassmembers public class * extends android.view.View &#123;</span><br><span class="line">    void set*(***);</span><br><span class="line">    *** get*();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># We want to keep methods in Activity that could be used in the XML attribute onClick.</span><br><span class="line"># 不混淆 Activity 子类的参数为 View 的 public 方法</span><br><span class="line">-keepclassmembers class * extends android.app.Activity &#123;</span><br><span class="line">    public void *(android.view.View);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># For enumeration classes, see http:&#x2F;&#x2F;proguard.sourceforge.net&#x2F;manual&#x2F;examples.html#enumerations</span><br><span class="line"># 不混淆枚举类的 values 和 valueOf 方法</span><br><span class="line">-keepclassmembers enum * &#123;</span><br><span class="line">    public static **[] values();</span><br><span class="line">    public static ** valueOf(java.lang.String);</span><br><span class="line">&#125;</span><br><span class="line"># 不混淆 Parceable 子类的 CREATOR 常量</span><br><span class="line">-keepclassmembers class * implements android.os.Parcelable &#123;</span><br><span class="line">    public static final ** CREATOR;</span><br><span class="line">&#125;</span><br><span class="line"># 不混淆 R 类的所有 public static 成员</span><br><span class="line">-keepclassmembers class **.R$* &#123;</span><br><span class="line">    public static &lt;fields&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Preserve annotated Javascript interface methods.</span><br><span class="line"># 不混淆 JavascriptInterface 注解的方法</span><br><span class="line">-keepclassmembers class * &#123;</span><br><span class="line">    @android.webkit.JavascriptInterface &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># The support libraries contains references to newer platform versions.</span><br><span class="line"># Don&#39;t warn about those in case this app is linking against an older</span><br><span class="line"># platform version. We know about them, and they are safe.</span><br><span class="line"># 不要警告 support 和 androidx 的报错</span><br><span class="line">-dontnote android.support.**</span><br><span class="line">-dontnote androidx.**</span><br><span class="line">-dontwarn android.support.**</span><br><span class="line">-dontwarn androidx.**</span><br><span class="line"></span><br><span class="line"># This class is deprecated, but remains for backward compatibility.</span><br><span class="line"># 不要警告 FloatMath 的报错</span><br><span class="line">-dontwarn android.util.FloatMath</span><br><span class="line"></span><br><span class="line"># Understand the @Keep support annotation.</span><br><span class="line"># 不混淆 @Keep 注解的类、成员</span><br><span class="line">-keep class android.support.annotation.Keep</span><br><span class="line">-keep class androidx.annotation.Keep</span><br><span class="line"></span><br><span class="line">-keep @android.support.annotation.Keep class * &#123;*;&#125;</span><br><span class="line">-keep @androidx.annotation.Keep class * &#123;*;&#125;</span><br><span class="line"></span><br><span class="line">-keepclasseswithmembers class * &#123;</span><br><span class="line">    @android.support.annotation.Keep &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-keepclasseswithmembers class * &#123;</span><br><span class="line">    @androidx.annotation.Keep &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-keepclasseswithmembers class * &#123;</span><br><span class="line">    @android.support.annotation.Keep &lt;fields&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-keepclasseswithmembers class * &#123;</span><br><span class="line">    @androidx.annotation.Keep &lt;fields&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-keepclasseswithmembers class * &#123;</span><br><span class="line">    @android.support.annotation.Keep &lt;init&gt;(...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-keepclasseswithmembers class * &#123;</span><br><span class="line">    @androidx.annotation.Keep &lt;init&gt;(...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># These classes are duplicated between android.jar and org.apache.http.legacy.jar.</span><br><span class="line"># 不警告 org.apache.http 和 android.net.http</span><br><span class="line">-dontnote org.apache.http.**</span><br><span class="line">-dontnote android.net.http.**</span><br><span class="line"></span><br><span class="line"># These classes are duplicated between android.jar and core-lambda-stubs.jar.</span><br><span class="line"># 不警告 java.lang.invoke</span><br><span class="line">-dontnote java.lang.invoke.**</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://developer.android.com/studio/build/shrink-code">缩减、混淆处理和优化应用</a></li><li><a href="https://stackoverflow.com/questions/46219987/shrinkresources-true-cant-be-used-on-instant-apps-feature">shrinkResources true can’t be used on Instant Apps Feature?</a></li><li><a href="https://www.jianshu.com/p/69878ed712be">Android ProGuard 代码混淆那些事儿</a></li><li><a href="https://blog.csdn.net/chen930724/article/details/49687067">Android ProGuard 混淆 详解</a></li><li><a href="https://juejin.im/entry/6844903444826832904">Android 混淆从入门到精通</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Android-Proguard-混淆&quot;&gt;&lt;a href=&quot;#Android-Proguard-混淆&quot; class=&quot;headerlink&quot; title=&quot;Android Proguard 混淆&quot;&gt;&lt;/a&gt;Android Proguard 混淆&lt;/h1&gt;&lt;p&gt;An</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.okclouder.cn/2020/08/31/android-view-unique-id/"/>
    <id>https://www.okclouder.cn/2020/08/31/android-view-unique-id/</id>
    <published>2020-08-31T13:55:03.156Z</published>
    <updated>2020-08-31T15:03:51.402Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-View-生成唯一-Id"><a href="#Android-View-生成唯一-Id" class="headerlink" title="Android View 生成唯一 Id"></a>Android View 生成唯一 Id</h1><p>可以使用 Hook LayoutInflater 的方法替换 SystemService 原有的 LayoutInflater，在自定义的 LayoutInflater 遍历每一个 view，为它们生成 md5 作为 view 的唯一 id。</p><h2 id="Hook-LayoutInflater"><a href="#Hook-LayoutInflater" class="headerlink" title="Hook LayoutInflater"></a>Hook LayoutInflater</h2><p>Hook LayoutInflater 的核心在于使用反射调用 registerService 方法，注册自定义的 LayoutInflater。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LayoutInflaterHook</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;LayoutInflaterHook&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hookLayoutInflater</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class&lt;?&gt; serviceFetcher = Class.forName(<span class="string">&quot;android.app.SystemServiceRegistry$ServiceFetcher&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取 ServiceFetcher 的实例 serviceFetcherImpl</span></span><br><span class="line">        Object serviceFetcherImpl = Proxy.newProxyInstance(LayoutInflaterHook.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class&lt;?&gt;[]&#123;serviceFetcher&#125;,</span><br><span class="line">                <span class="keyword">new</span> ServiceFetcherHandler());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 SystemServiceRegistry 的 registerService 方法</span></span><br><span class="line">        Class&lt;?&gt; systemServiceRegistry = Class.forName(<span class="string">&quot;android.app.SystemServiceRegistry&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 无法反射调用 registerService，registerService 在 Android 10 版本以上都是 blacklist 级别的 api，</span></span><br><span class="line">        <span class="comment">// 反射调用会被系统拒绝，抛出 NoSuchMethodException。</span></span><br><span class="line">        Method registerService = systemServiceRegistry.getDeclaredMethod(<span class="string">&quot;registerService&quot;</span>,</span><br><span class="line">                String.class,</span><br><span class="line">                CustomLayoutInflater.class.getClass(),</span><br><span class="line">                serviceFetcher);</span><br><span class="line">        registerService.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用 registerService 方法，将自定义的 CustomLayoutInflater 设置到 SystemServiceRegistry</span></span><br><span class="line">        registerService.invoke(systemServiceRegistry,</span><br><span class="line">                Context.LAYOUT_INFLATER_SERVICE, CustomLayoutInflater.class, serviceFetcherImpl);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试</span></span><br><span class="line">        Field systemServiceFetchers = systemServiceRegistry.getDeclaredField(<span class="string">&quot;SYSTEM_SERVICE_FETCHERS&quot;</span>);</span><br><span class="line">        systemServiceFetchers.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Map systemServiceFetchersField = (Map) systemServiceFetchers.get(<span class="keyword">null</span>);</span><br><span class="line">        Set set = systemServiceFetchersField.keySet();</span><br><span class="line">        Object service = systemServiceFetchersField.get(Context.LAYOUT_INFLATER_SERVICE);</span><br><span class="line">        Log.w(TAG, <span class="string">&quot;find layout inflater:&quot;</span> + service);</span><br><span class="line">        <span class="keyword">for</span> (Object next : set) &#123;</span><br><span class="line">            Object value = systemServiceFetchersField.get(next);</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;key:&quot;</span> + next);</span><br><span class="line">            Log.d(TAG,<span class="string">&quot;value:&quot;</span> + value);</span><br><span class="line">            <span class="keyword">if</span> (Context.LAYOUT_INFLATER_SERVICE.equals(next)) &#123;</span><br><span class="line">                Log.e(TAG, <span class="string">&quot;find Service for layout inflater:&quot;</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="动态代理-ServiceFetcher"><a href="#动态代理-ServiceFetcher" class="headerlink" title="动态代理 ServiceFetcher"></a>动态代理 ServiceFetcher</h2><p>因为 ServiceFetcher 是 SystemServiceRegistry 的内部借口，因此需要使用动态代理的方式实现它的 invoke 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceFetcherHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 当调用 ServiceFetcherImpl 的 getService 的时候，会返回自定义的 LayoutInflater</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;toString&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;ServiceFetcherHandler&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomLayoutInflater((Context) args[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义-LayoutInflater"><a href="#自定义-LayoutInflater" class="headerlink" title="自定义 LayoutInflater"></a>自定义 LayoutInflater</h2><p>当调用 getService 时，会返回自定义的 CustomLayoutInflater。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomLayoutInflater</span> <span class="keyword">extends</span> <span class="title">LayoutInflater</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] sClassPrefixList = &#123;</span><br><span class="line">            <span class="string">&quot;android.widget.&quot;</span>,</span><br><span class="line">            <span class="string">&quot;android.webkit.&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> VIEW_TAG = <span class="number">0x10000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomLayoutInflater</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomLayoutInflater</span><span class="params">(LayoutInflater original, Context newContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(original, newContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> View <span class="title">onCreateView</span><span class="params">(String name, AttributeSet attrs)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String prefix : sClassPrefixList) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                View view = createView(name, prefix, attrs);</span><br><span class="line">                <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> view;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InflateException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onCreateView(name, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LayoutInflater <span class="title">cloneInContext</span><span class="params">(Context newContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomLayoutInflater(<span class="keyword">this</span>, newContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">inflate</span><span class="params">(<span class="keyword">int</span> resource, <span class="meta">@Nullable</span> ViewGroup root, <span class="keyword">boolean</span> attachToRoot)</span> </span>&#123;</span><br><span class="line">        View viewGroup = <span class="keyword">super</span>.inflate(resource, root, attachToRoot);</span><br><span class="line">        View rootView = viewGroup;</span><br><span class="line">        View tempView = viewGroup;</span><br><span class="line">        <span class="comment">// 向上遍历得到根 View</span></span><br><span class="line">        <span class="keyword">while</span> (tempView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            rootView = viewGroup;</span><br><span class="line">            tempView = ((ViewGroup) tempView.getParent());</span><br><span class="line">        &#125;</span><br><span class="line">        traversalViewGroup(rootView);</span><br><span class="line">        <span class="keyword">return</span> viewGroup;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">traversalViewGroup</span><span class="params">(View rootView)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rootView == <span class="keyword">null</span> || !(rootView <span class="keyword">instanceof</span> ViewGroup)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果 rootView 没有 tag，设置它的 view 值为 VIEW_TAG 计数值</span></span><br><span class="line">        <span class="keyword">if</span> (rootView.getTag() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            rootView.setTag(getViewTag());</span><br><span class="line">        &#125;</span><br><span class="line">        ViewGroup viewGroup = (ViewGroup) rootView;</span><br><span class="line">        <span class="keyword">int</span> childCount = ((ViewGroup) rootView).getChildCount();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; ++i) &#123;</span><br><span class="line">            View childView = viewGroup.getChildAt(i);</span><br><span class="line">            <span class="keyword">if</span> (childView.getTag() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                childView.setTag(combineTag(getViewTag(), rootView.getTag().toString()));</span><br><span class="line">            &#125;</span><br><span class="line">            Log.e(<span class="string">&quot;Hooker&quot;</span>, <span class="string">&quot;childView name=&quot;</span> + childView.getClass().getName()</span><br><span class="line">                    + <span class="string">&quot;, id = &quot;</span> + childView.getTag().toString());</span><br><span class="line">            <span class="keyword">if</span> (childView <span class="keyword">instanceof</span> ViewGroup) &#123;</span><br><span class="line">                <span class="comment">// 深度优先遍历</span></span><br><span class="line">                traversalViewGroup(childView);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">combineTag</span><span class="params">(String tag1, String tag2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getMd5(getMd5(tag1) + getMd5(tag2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getViewTag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(VIEW_TAG++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getMd5</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MessageDigest md5 = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">            md5.update(str.getBytes());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(<span class="number">1</span>, md5.digest()).toString(<span class="number">16</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;null&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过组合父 view 和自身 view 的 md5 得到唯一的 view id。</p><h2 id="Android-黑名单的限制"><a href="#Android-黑名单的限制" class="headerlink" title="Android 黑名单的限制"></a>Android 黑名单的限制</h2><p>从 Android 9 开始，Android 系统限制了部分 System api 的调用。Hook LayoutInflater 用到的 registerService 方法就被列入了黑名单，反射调用直接抛出 NoSuchMethodException。因此 Hook LayoutInflater 的方法实际不可用，但是可以通过修改系统设置本地调试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global hidden_api_policy  1</span><br></pre></td></tr></table></figure><p>关于在 Android 10 中授予对非 SDK 接口的访问权限，可以查看 <a href="https://developer.android.google.cn/about/versions/10/non-sdk-q#enable-non-sdk-access">Android 10 中有关限制非 SDK 接口的更新</a></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/caoshen/AndroidEfficientAdvanced">https://github.com/caoshen/AndroidEfficientAdvanced</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Android-View-生成唯一-Id&quot;&gt;&lt;a href=&quot;#Android-View-生成唯一-Id&quot; class=&quot;headerlink&quot; title=&quot;Android View 生成唯一 Id&quot;&gt;&lt;/a&gt;Android View 生成唯一 Id&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.okclouder.cn/2020/08/31/%E9%9D%A2%E8%AF%95%E9%A2%98%2016.03.%20%E4%BA%A4%E7%82%B9/"/>
    <id>https://www.okclouder.cn/2020/08/31/%E9%9D%A2%E8%AF%95%E9%A2%98%2016.03.%20%E4%BA%A4%E7%82%B9/</id>
    <published>2020-08-31T13:54:09.692Z</published>
    <updated>2020-08-31T13:54:09.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面试题-16-03-交点"><a href="#面试题-16-03-交点" class="headerlink" title="面试题 16.03. 交点"></a>面试题 16.03. 交点</h1><p>给定两条线段（表示为起点start = {X1, Y1}和终点end = {X2, Y2}），如果它们有交点，请计算其交点，没有交点则返回空值。</p><p>要求浮点型误差不超过10^-6。若有多个交点（线段重叠）则返回 X 值最小的点，X 坐标相同则返回 Y 值最小的点。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">line1 &#x3D; &#123;0, 0&#125;, &#123;1, 0&#125;</span><br><span class="line">line2 &#x3D; &#123;1, 1&#125;, &#123;0, -1&#125;</span><br><span class="line">输出： &#123;0.5, 0&#125;</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">line1 &#x3D; &#123;0, 0&#125;, &#123;3, 3&#125;</span><br><span class="line">line2 &#x3D; &#123;1, 1&#125;, &#123;2, 2&#125;</span><br><span class="line">输出： &#123;1, 1&#125;</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">line1 &#x3D; &#123;0, 0&#125;, &#123;1, 1&#125;</span><br><span class="line">line2 &#x3D; &#123;1, 0&#125;, &#123;2, 1&#125;</span><br><span class="line">输出： &#123;&#125;，两条线段没有交点</span><br></pre></td></tr></table></figure><p>提示：</p><p>坐标绝对值不会超过 2^7<br>输入的坐标均是有效的二维坐标</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/intersection-lcci">https://leetcode-cn.com/problems/intersection-lcci</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>如果其中一个线段的两个点都在另一个线段的同一边，那么它们不会相交。如果每一个线段的两个点都在另一个线段的不同边或者有一个点在另一个线段上，那么会相交。</p><p>针对相交的情况，又可以分为两种情况：</p><ol><li>两条线段在一条直线的情况，需要根据线段的端点判断两条线段是否重叠。</li><li>两条线段不在一条直线的情况，根据两条直线的方程求交点坐标。</li></ol><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断两个线段是否相交。</span></span><br><span class="line"><span class="comment">     * 如果其中一个线段的两个点都在另一个线段的同一边，那么不会相交。</span></span><br><span class="line"><span class="comment">     * 如果每一个线段的两个点都在另一个线段的不同边，那么会相交。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span>[] intersection(<span class="keyword">int</span>[] start1, <span class="keyword">int</span>[] end1, <span class="keyword">int</span>[] start2, <span class="keyword">int</span>[] end2) &#123;</span><br><span class="line">        <span class="keyword">int</span> resultStart2OfLine1 = calcSide(start1, end1, start2);</span><br><span class="line">        <span class="keyword">int</span> resultEnd2OfLine1 = calcSide(start1, end1, end2);</span><br><span class="line">        <span class="keyword">boolean</span> isLine2CrossLine1 = resultStart2OfLine1 * resultEnd2OfLine1 &lt;= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> resultStart1OfLine2 = calcSide(start2, end2, start1);</span><br><span class="line">        <span class="keyword">int</span> resultEnd1OfLine2 = calcSide(start2, end2, end1);</span><br><span class="line">        <span class="keyword">boolean</span> isLine1CrossLine2 = resultStart1OfLine2 * resultEnd1OfLine2 &lt;= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线段会相交</span></span><br><span class="line">        <span class="keyword">if</span> (isLine2CrossLine1 &amp;&amp; isLine1CrossLine2) &#123;</span><br><span class="line">            <span class="comment">// 重叠情况，同一条直线。其中一个端点一定在另一条线段上。</span></span><br><span class="line">            <span class="keyword">if</span> (resultStart2OfLine1 == <span class="number">0</span> &amp;&amp; resultEnd2OfLine1 == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将线段端点按序排列</span></span><br><span class="line">                <span class="keyword">int</span>[] min1 = calcMinPointer(start1, end1);</span><br><span class="line">                <span class="keyword">int</span>[] max1 = end1;</span><br><span class="line">                <span class="keyword">if</span> (min1 != start1) &#123;</span><br><span class="line">                    max1 = start1;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span>[] min2 = calcMinPointer(start2, end2);</span><br><span class="line">                <span class="keyword">int</span>[] max2 = end2;</span><br><span class="line">                <span class="keyword">if</span> (min2 != start2) &#123;</span><br><span class="line">                    max2 = start2;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (min1[<span class="number">0</span>] &gt; min2[<span class="number">0</span>] || min1[<span class="number">1</span>] &gt; min2[<span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="comment">// 交换线段位置</span></span><br><span class="line">                    <span class="keyword">int</span>[] temp = min1;</span><br><span class="line">                    min1 = min2;</span><br><span class="line">                    min2 = temp;</span><br><span class="line"></span><br><span class="line">                    temp = max1;</span><br><span class="line">                    max1 = max2;</span><br><span class="line">                    max2 = temp;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (comparePoints(max1, min2) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">double</span>[]&#123;&#125;;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (comparePoints(max2, min1) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">double</span>[]&#123;&#125;;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (comparePoints(max1, min2) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">double</span>[]&#123;min2[<span class="number">0</span>], min2[<span class="number">1</span>]&#125;;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (comparePoints(max2, min1) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">double</span>[]&#123;min1[<span class="number">0</span>], min1[<span class="number">1</span>]&#125;;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">double</span>[]&#123;&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 两条直线有交点情况</span></span><br><span class="line">            <span class="comment">// 求解 (y1 - y2) * (x - x1) - (x1 - x2) * (y - y1) = 0 和 (y3 - y4) * (x - x3) - (x3 - x4) * (y - y3) = 0</span></span><br><span class="line">            <span class="comment">//  先求 x 。(y1 - y2) * (x - x1) / (x1 - x2) + y1 = y = (y3 - y4) * (x - x3) / (x3 - x4) + y3 = y</span></span><br><span class="line">            <span class="comment">// (y1-y2)(x-x1)(x3-x4) - (y3-y4)(x-x3)(x1-x2) = (y3 - y1)(x1-x2)(x3-x4);</span></span><br><span class="line">            <span class="comment">//  [(y1-y2)(x3-x4) - (y3-y4)(x1-x2)]x + [(y3-y4)(x1-x2)x3 - (y1-y2)(x3-x4)x1] = (y3 - y1)(x1-x2)(x3-x4)</span></span><br><span class="line">            <span class="comment">// x = &#123;(y3 - y1)(x1-x2)(x3-x4) - [(y3-y4)(x1-x2)x3 - (y1-y2)(x3-x4)x1]&#125; / [(y1-y2)(x3-x4) - (y3-y4)(x1-x2)]</span></span><br><span class="line">            <span class="keyword">double</span> p0 = ((start2[<span class="number">1</span>] - start1[<span class="number">1</span>]) * (start1[<span class="number">0</span>] - end1[<span class="number">0</span>]) * (start2[<span class="number">0</span>] - end2[<span class="number">0</span>])</span><br><span class="line">                - ((start2[<span class="number">1</span>] - end2[<span class="number">1</span>]) * (start1[<span class="number">0</span>] - end1[<span class="number">0</span>]) * start2[<span class="number">0</span>] - (start1[<span class="number">1</span>] - end1[<span class="number">1</span>]) * (start2[<span class="number">0</span>] - end2[<span class="number">0</span>]) * start1[<span class="number">0</span>])</span><br><span class="line">                ) * <span class="number">1.0</span> / ((start1[<span class="number">1</span>] - end1[<span class="number">1</span>]) * (start2[<span class="number">0</span>] - end2[<span class="number">0</span>]) - (start2[<span class="number">1</span>] - end2[<span class="number">1</span>]) * (start1[<span class="number">0</span>] - end1[<span class="number">0</span>]));</span><br><span class="line">            <span class="comment">// 同理 y = &#123;(x3 - x1)(y1-y2)(y3-y4) - [(x3-x4)(y1-y2)y3 - (x1-x2)(y3-y4)y1]&#125; / [(x1-x2)(y3-y4) - (x3-x4)(y1-y2)]</span></span><br><span class="line">            <span class="keyword">double</span> p1 = ((start2[<span class="number">0</span>] - start1[<span class="number">0</span>]) * (start1[<span class="number">1</span>] - end1[<span class="number">1</span>]) * (start2[<span class="number">1</span>] - end2[<span class="number">1</span>])</span><br><span class="line">                - ((start2[<span class="number">0</span>] - end2[<span class="number">0</span>]) * (start1[<span class="number">1</span>] - end1[<span class="number">1</span>]) * start2[<span class="number">1</span>] - (start1[<span class="number">0</span>] - end1[<span class="number">0</span>]) * (start2[<span class="number">1</span>] - end2[<span class="number">1</span>]) * start1[<span class="number">1</span>])</span><br><span class="line">                ) * <span class="number">1.0</span> / ((start1[<span class="number">0</span>] - end1[<span class="number">0</span>]) * (start2[<span class="number">1</span>] - end2[<span class="number">1</span>]) - (start2[<span class="number">0</span>] - end2[<span class="number">0</span>]) * (start1[<span class="number">1</span>] - end1[<span class="number">1</span>]));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">double</span>[]&#123;p0, p1&#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">double</span>[]&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线段的方程： (y1 - y2) * (x - x1) - (x1 - x2) * (y - y1) = 0</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">calcSide</span><span class="params">(<span class="keyword">int</span>[] start, <span class="keyword">int</span>[] end, <span class="keyword">int</span>[] point)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (start[<span class="number">1</span>] - end[<span class="number">1</span>]) * (point[<span class="number">0</span>] - start[<span class="number">0</span>]) - (start[<span class="number">0</span>] - end[<span class="number">0</span>]) * (point[<span class="number">1</span>] - start[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] calcMinPointer(<span class="keyword">int</span>[] point1, <span class="keyword">int</span>[] point2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (point1[<span class="number">0</span>] &lt; point2[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> point1;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (point1[<span class="number">0</span>] == point2[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (point1[<span class="number">1</span>] &lt; point2[<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> point1;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> point2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> point2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">comparePoints</span><span class="params">(<span class="keyword">int</span>[] point1, <span class="keyword">int</span>[] point2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (point1[<span class="number">0</span>] &lt; point2[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (point1[<span class="number">0</span>] == point2[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (point1[<span class="number">1</span>] &lt; point2[<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (point1[<span class="number">1</span>] == point2[<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;面试题-16-03-交点&quot;&gt;&lt;a href=&quot;#面试题-16-03-交点&quot; class=&quot;headerlink&quot; title=&quot;面试题 16.03. 交点&quot;&gt;&lt;/a&gt;面试题 16.03. 交点&lt;/h1&gt;&lt;p&gt;给定两条线段（表示为起点start = {X1, Y1}</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.okclouder.cn/2020/08/31/%E9%9D%A2%E8%AF%95%E9%A2%9824.%20%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>https://www.okclouder.cn/2020/08/31/%E9%9D%A2%E8%AF%95%E9%A2%9824.%20%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2020-08-31T13:54:09.692Z</published>
    <updated>2020-08-31T13:54:09.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面试题24-反转链表"><a href="#面试题24-反转链表" class="headerlink" title="面试题24. 反转链表"></a>面试题24. 反转链表</h1><p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure><p>限制：</p><p>0 &lt;= 节点个数 &lt;= 5000</p><p>注意：本题与主站 206 题相同：<a href="https://leetcode-cn.com/problems/reverse-linked-list/">https://leetcode-cn.com/problems/reverse-linked-list/</a></p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof">https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>采用头插法将当前节点的下一个节点依次插入到头部。构造一个假头节点方便插入。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode p = head;</span><br><span class="line">        <span class="comment">// 假头节点</span></span><br><span class="line">        ListNode h = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        h.next = p;</span><br><span class="line">        <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 将当前节点的下一个节点插入到链表头部</span></span><br><span class="line">            ListNode q = p.next;</span><br><span class="line">            p.next = q.next;</span><br><span class="line">            q.next = h.next;</span><br><span class="line">            h.next = q;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;面试题24-反转链表&quot;&gt;&lt;a href=&quot;#面试题24-反转链表&quot; class=&quot;headerlink&quot; title=&quot;面试题24. 反转链表&quot;&gt;&lt;/a&gt;面试题24. 反转链表&lt;/h1&gt;&lt;p&gt;定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.okclouder.cn/2020/08/31/%E9%9D%A2%E8%AF%95%E9%A2%9856%20-%20I.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%AD%97%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/"/>
    <id>https://www.okclouder.cn/2020/08/31/%E9%9D%A2%E8%AF%95%E9%A2%9856%20-%20I.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%AD%97%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</id>
    <published>2020-08-31T13:54:09.692Z</published>
    <updated>2020-08-31T13:54:09.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面试题56-I-数组中数字出现的次数"><a href="#面试题56-I-数组中数字出现的次数" class="headerlink" title="面试题56 - I. 数组中数字出现的次数"></a>面试题56 - I. 数组中数字出现的次数</h1><p>一个整型数组 nums 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [4,1,4,6]</span><br><span class="line">输出：[1,6] 或 [6,1]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums &#x3D; [1,2,10,4,1,4,3,3]</span><br><span class="line">输出：[2,10] 或 [10,2]</span><br></pre></td></tr></table></figure><p>限制：</p><p>2 &lt;= nums &lt;= 10000</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof">https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>一种方法是使用 Set 保存已经存在的数，如果再次出现就把它从 Set 删除，留下只出现一次的数。</p><p>更好的方法是使用异或的思想。如果一个数字出现了两次，那么异或以后就是 0，最后剩下只出现一次的数的异或。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p>方法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Integer&gt; numSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] singleNumbers(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (numSet.contains(n)) &#123;</span><br><span class="line">                numSet.remove(n);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                numSet.add(n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : numSet) &#123;</span><br><span class="line">            result[i++] = n;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] singleNumbers(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> xor = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : nums) &#123;</span><br><span class="line">            xor ^= n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> d = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 找出只出现一次的两个数 a、b 的不相同的最低位。</span></span><br><span class="line">        <span class="keyword">while</span> ((d &amp; xor) == <span class="number">0</span>) &#123;</span><br><span class="line">            d &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 根据找到的最低位分组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((n &amp; d) == <span class="number">0</span>) &#123;</span><br><span class="line">                a ^= n;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                b ^= n;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;a, b&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;面试题56-I-数组中数字出现的次数&quot;&gt;&lt;a href=&quot;#面试题56-I-数组中数字出现的次数&quot; class=&quot;headerlink&quot; title=&quot;面试题56 - I. 数组中数字出现的次数&quot;&gt;&lt;/a&gt;面试题56 - I. 数组中数字出现的次数&lt;/h1&gt;&lt;p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.okclouder.cn/2020/08/31/%E9%9D%A2%E8%AF%95%E9%A2%9862.%20%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>https://www.okclouder.cn/2020/08/31/%E9%9D%A2%E8%AF%95%E9%A2%9862.%20%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97/</id>
    <published>2020-08-31T13:54:09.692Z</published>
    <updated>2020-08-31T13:54:09.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面试题62-圆圈中最后剩下的数字"><a href="#面试题62-圆圈中最后剩下的数字" class="headerlink" title="面试题62. 圆圈中最后剩下的数字"></a>面试题62. 圆圈中最后剩下的数字</h1><p>0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。</p><p>例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: n &#x3D; 5, m &#x3D; 3</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: n &#x3D; 10, m &#x3D; 17</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><p>限制：</p><p>1 &lt;= n &lt;= 10^5<br>1 &lt;= m &lt;= 10^6</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof">https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>需要用倒推的思路解决。最后一个数的下标一定是 0，如果 m = 3，那么上一轮有2个数备选的情况下这个数的位置是1，以此类推。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastRemaining</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 最后一轮得到的数字的下标是 0，只有一个</span></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 开始反推 lastIndex = (curIndex + m) % i，i 是当前这一轮的剩余的个数。从剩余2人的情况开始</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            ans = (ans + m) % i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;面试题62-圆圈中最后剩下的数字&quot;&gt;&lt;a href=&quot;#面试题62-圆圈中最后剩下的数字&quot; class=&quot;headerlink&quot; title=&quot;面试题62. 圆圈中最后剩下的数字&quot;&gt;&lt;/a&gt;面试题62. 圆圈中最后剩下的数字&lt;/h1&gt;&lt;p&gt;0,1,,n-1这n个数</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.okclouder.cn/2020/08/31/%E8%87%AA%E5%AE%9A%E4%B9%89%20ActivityNotifier%20%E8%A7%82%E5%AF%9F%E6%89%80%E6%9C%89%20Activity%20%E5%88%87%E6%8D%A2/"/>
    <id>https://www.okclouder.cn/2020/08/31/%E8%87%AA%E5%AE%9A%E4%B9%89%20ActivityNotifier%20%E8%A7%82%E5%AF%9F%E6%89%80%E6%9C%89%20Activity%20%E5%88%87%E6%8D%A2/</id>
    <published>2020-08-31T13:54:09.691Z</published>
    <updated>2020-08-31T13:54:09.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义-ActivityNotifier-观察所有-Activity-切换"><a href="#自定义-ActivityNotifier-观察所有-Activity-切换" class="headerlink" title="自定义 ActivityNotifier 观察所有 Activity 切换"></a>自定义 ActivityNotifier 观察所有 Activity 切换</h1><p>我们知道，使用 Application 注册 ActivityLifecycleCallbacks 可以观察到本应用的所有 Activity 的生命周期切换。那么有没有一种方法可以观察到手机上所有应用的 Activity 的生命周期切换？</p><p>因为所有 Activity 的生命周期回调都会经过 ActivityManagerService(AMS) 管理，最后回调到应用的 ActivityThread。所以如果想要观察手机上所有应用的 Activity 生命周期回调，最好的办法就是在 AMS 中添加自定义的接口来实现。</p><h2 id="ActivityTaskManagerService"><a href="#ActivityTaskManagerService" class="headerlink" title="ActivityTaskManagerService"></a>ActivityTaskManagerService</h2><p>Android 10 版本（Q 版本）中新增了一个 ActivityTaskManagerService（ATMS） 类，它的作用是承担 AMS 的部分功能。由于 AMS 过于庞大，所以将部分功能剥离给 ATMS 来处理。</p><p>ActivityTaskManagerService 中有一些回调方法，例如 activityResumed 方法，所有 Activity 的 onResume 走完之后，都会调用 ATMS 的 activityResumed。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">activityResumed</span><span class="params">(IBinder token)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</span><br><span class="line">    <span class="keyword">synchronized</span> (mGlobalLock) &#123;</span><br><span class="line">        ActivityRecord.activityResumedLocked(token);</span><br><span class="line">        mWindowManager.notifyAppResumedFinished(token);</span><br><span class="line">    &#125;</span><br><span class="line">    Binder.restoreCallingIdentity(origId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">activityTopResumedStateLost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">activityPaused</span><span class="params">(IBinder token)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">activityStopped</span><span class="params">(IBinder token, Bundle icicle,</span></span></span><br><span class="line"><span class="function"><span class="params">        PersistableBundle persistentState, CharSequence description)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">activityDestroyed</span><span class="params">(IBinder token)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">activityRelaunched</span><span class="params">(IBinder token)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>知道了 ActivityTaskManagerService 的 activityResumed 这些系统回调后，我们就可以在每个方法中添加分发方法，将每个生命周期事件分发出去。如果发现有应用注册了某个事件，就将该事件分发给它。</p><p>比如自定义接口 IActivityNotifier</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface IActivityNotifier &#123;</span><br><span class="line">    void call(Bundle extras);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>call 方法表示某个事件被触发，extras 参数表示这个事件携带的一些信息，比如是什么原因引起的这次事件。</p><p>然后通过 AMS 注册接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regsiterActivityNotifier</span><span class="params">(IActivityNotifier notifier)</span> </span>&#123;</span><br><span class="line">    ActivityManagerEx.regsiterActivityNotifier(notifier);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 ActivityManagerEx 表示 ActivityManager 的扩展类，它包含了一些定制的方法。</p><p>然后使用 RemoteCallbackList 保存每个注册过来的 IActivityNotifier 回调。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RemoteCallbackList&lt;IActivityNotifier&gt; mCallbacks =</span><br><span class="line">        <span class="keyword">new</span> RemoteCallbackList&lt;&gt;();</span><br></pre></td></tr></table></figure><p>分别注册和反注册回调。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regsiterActivityNotifier</span><span class="params">(IActivityNotifier cb)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cb != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mCallbacks.register(cb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregsiterActivityNotifier</span><span class="params">(IActivityNotifier cb)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cb != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mCallbacks.unregister(cb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在 ATMS 的 activityResumed 将事件分发出去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">activityResumed</span><span class="params">(IBinder token)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</span><br><span class="line">    <span class="keyword">synchronized</span> (mGlobalLock) &#123;</span><br><span class="line">        ActivityRecord.activityResumedLocked(token);</span><br><span class="line">        mWindowManager.notifyAppResumedFinished(token);</span><br><span class="line">        <span class="comment">// 分发事件</span></span><br><span class="line">        ATMSEx.dispatchActivityLifeState(...);</span><br><span class="line">    &#125;</span><br><span class="line">    Binder.restoreCallingIdentity(origId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dispatchActivityLifeState 方法将事件通过消息的方式分发出去：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchActivityLifeState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Message message = Message.obtain(mHandler, NOTIFY_CALL);</span><br><span class="line">    Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">    <span class="comment">// 存入数据</span></span><br><span class="line">    bundle.putInt(...);</span><br><span class="line">    message.obj = bundle;</span><br><span class="line">    mHandler.sendMessage(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在 mHandler 中处理消息，遍历每一个 IActivityNotifier 回调，依次派发。</p><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> NOTIFY_CALL: &#123;</span><br><span class="line">                <span class="keyword">int</span> n = mCallbacks.beginBroadcast();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        mCallbacks.getBroadcastItem(i).call(bundle);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                mCallbacks.finishBroadcast();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看出，整个流程和 Application 注册 ActivityLifecycleCallbacks 的过程很类似，都是在某个事件发生时派发给各个注册的接口。只不过 IActivityNotifier 是应用注册到 AMS。而 ActivityLifecycleCallbacks 在应用内部注册。</p><h2 id="ActivityLifecycleItem"><a href="#ActivityLifecycleItem" class="headerlink" title="ActivityLifecycleItem"></a>ActivityLifecycleItem</h2><p>最后看一下为什么所有 Activity 的 onResume 后，都会走到 ATMS 的 activityResumed 方法。</p><p>在 Android 9 版本（P 版本）之后，AMS 不是直接调用 ActivityThread 的各个方法，而是通过 ActivityLifecycleItem 来管理。比如 Acivity 启动后最终要到 onResume 状态，就使用 ResumeActivityItem。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Request to move an activity to resumed state.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResumeActivityItem</span> <span class="keyword">extends</span> <span class="title">ActivityLifecycleItem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;ResumeActivityItem&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mProcState;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mUpdateProcState;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mIsForward;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preExecute</span><span class="params">(ClientTransactionHandler client, IBinder token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mUpdateProcState) &#123;</span><br><span class="line">            client.updateProcessState(mProcState, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ClientTransactionHandler client, IBinder token,</span></span></span><br><span class="line"><span class="function"><span class="params">            PendingTransactionActions pendingActions)</span> </span>&#123;</span><br><span class="line">        Trace.traceBegin(TRACE_TAG_ACTIVITY_MANAGER, <span class="string">&quot;activityResume&quot;</span>);</span><br><span class="line">        client.handleResumeActivity(token, <span class="keyword">true</span> <span class="comment">/* finalStateRequest */</span>, mIsForward,</span><br><span class="line">                <span class="string">&quot;RESUME_ACTIVITY&quot;</span>);</span><br><span class="line">        Trace.traceEnd(TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postExecute</span><span class="params">(ClientTransactionHandler client, IBinder token,</span></span></span><br><span class="line"><span class="function"><span class="params">            PendingTransactionActions pendingActions)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// TODO(lifecycler): Use interface callback instead of AMS.</span></span><br><span class="line">            ActivityTaskManager.getService().activityResumed(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex.rethrowFromSystemServer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>和 AsyncTask 类似，ResumeActivityItem 有 3 个回调方法，preExecute、execute、postExecute，依次表示执行前、执行中、执行后。</p><p>查看 execute 和 postExecute 方法，可以看出 handleResumeActivity 之后会执行 ATMS 的 activityResumed 方法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自定义-ActivityNotifier-观察所有-Activity-切换&quot;&gt;&lt;a href=&quot;#自定义-ActivityNotifier-观察所有-Activity-切换&quot; class=&quot;headerlink&quot; title=&quot;自定义 ActivityNotifi</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.okclouder.cn/2020/08/31/%E8%93%9D%E7%89%994.0%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/"/>
    <id>https://www.okclouder.cn/2020/08/31/%E8%93%9D%E7%89%994.0%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/</id>
    <published>2020-08-31T13:54:09.691Z</published>
    <updated>2020-08-31T13:54:09.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="蓝牙4-0核心架构分析"><a href="#蓝牙4-0核心架构分析" class="headerlink" title="蓝牙4.0核心架构分析"></a>蓝牙4.0核心架构分析</h1><h2 id="核心系统架构"><a href="#核心系统架构" class="headerlink" title="核心系统架构"></a>核心系统架构</h2><h3 id="经典蓝牙核心系统"><a href="#经典蓝牙核心系统" class="headerlink" title="经典蓝牙核心系统"></a>经典蓝牙核心系统</h3><p>实现蓝牙BR/EDR的最小核心系统涵盖4个底层和蓝牙规范定义的相关协议，以及一个公共服务层协议。</p><p>服务发现协议（SDP）和所有必要的配置文件在通用访问配置文件（Generic Access Profile，GAP）中定义。</p><p>BR/EDR核心系统包括对AMP的支持以及AMP管理协议（AMP Manager Protocol）和协议适配层（PAL），也支持相应的外部MAC/PHY。</p><p>链路管理器、链路控制器和BR/EDR射频物理层组成一个BR/EDR控制器。</p><p>AMP协议适配层、AMP媒介访问控制和AMP物理层组成一个AMP控制器。</p><p>逻辑链路控制和适配协议（L2CAP）、服务发现协议和通用访问配置文件组成BR/EDR 主机。</p><h3 id="低功耗蓝牙核心系统"><a href="#低功耗蓝牙核心系统" class="headerlink" title="低功耗蓝牙核心系统"></a>低功耗蓝牙核心系统</h3><p>低功耗蓝牙的体系结构分成三个基本部分：控制器、主机和应用程序。</p><p>控制器通常是一个物理设备，它能够发送和接收无线信号，并懂得如何将这些信号翻译成携带信息的数据包。</p><p>主机通常是一个软件栈，管理两台或多台设备间如何通信以及如何利用无线电同时提供几种不同的服务。</p><p>应用程序则使用软件栈，进而是控制器来实现用户实例。</p><p>实现蓝牙LE的最小核心系统覆盖4个底层和蓝牙规范定义的相关协议，以及两个公共服务层协议。</p><p>安全管理（Security Manager，SM）、属性协议（Attribute Protocol，ATT）与所有必要的配置文件定义在通用属性配置文件（Generic Attribute Profile，GATT）和通用访问配置文件。</p><p>链路管理器、链路控制器和LE射频物理层组成一个LE控制器。</p><p>逻辑链路控制和适配协议（L2CAP）、安全管理协议、属性协议、通用访问配置文件和通用属性配置文件组成一个LE主机。</p><h2 id="核心架构模块介绍"><a href="#核心架构模块介绍" class="headerlink" title="核心架构模块介绍"></a>核心架构模块介绍</h2><h3 id="信道管理器"><a href="#信道管理器" class="headerlink" title="信道管理器"></a>信道管理器</h3><p>信道管理器负责创建、管理和结束用于服务协议和应用数据流传输的L2CAP信道。信道管理器通过L2CAP与远程（对等）设备上的信道管理器交互，以创建这些L2CAP信道并将它们的端点连接到对应的实体。信道管理器与本地链路管理器交互来创建新的逻辑链路和配置这些链路，以提供被传输数据类型要求的质量服务。</p><h3 id="L2CAP资源管理器"><a href="#L2CAP资源管理器" class="headerlink" title="L2CAP资源管理器"></a>L2CAP资源管理器</h3><p>L2CAP 资源管理器负责管理发送至基带的协议数据单元（Protocol Data Unit，PDU）片段的提交顺序以及信道间的相关调度，以确保不会因为Bluetooth控制器资源耗尽而导致带有QoS承诺的L2CAP信道的L2CAP信道对物理信道的访问被拒绝。这是必须的，因为架构模型不会假设Bluetooth控制器拥有无限大缓冲，也不会假设HCI是具有无线点带宽的管道。</p><p>L2CAP 资源管理器也可以执行通信量符合性管制功能，以确保这些应用在它们协商好的QoS设置的限制范围内提交L2CAP服务数据单元（Service Data Unit，SDU）。一般的 Bluetooth 数据传输模型会假设每项应用都符合相关要求，而不会定义某项具体实施应如何处理此类问题。</p><h3 id="设备管理器"><a href="#设备管理器" class="headerlink" title="设备管理器"></a>设备管理器</h3><p>设备管理器是基带的功能块，用于控制启用Bluetooth的设备的一般行为。它负责Bluetooth系统所有与数据传输无直接关系的操作，例如查询附近是否有其他启用Bluetooth的设备，连接到其他启用Bluetooth的设备，或使本地启用 Bluetooth 的设备可被其他设备发现或连接。</p><p>设备管理器请求从基带资源控制器访问传输媒体，以执行它的功能。</p><p>设备管理器还控制多个HCI命令指示的本地设备行为，例如管理设备本地名称、任何已存储的链路密钥和其他功能。</p><h3 id="链路管理器"><a href="#链路管理器" class="headerlink" title="链路管理器"></a>链路管理器</h3><p>链路管理器负责创建、修改和释放逻辑链路（以及与这些链路关联的逻辑传输，如有需要），还可以更新与设备之间的物理链路有关的参数。链路管理器通过使用链路管理协议（LMP）与远程Bluetooth设备通信实现此功能。</p><p>LMP 可以根据需要在设备之间创建新逻辑链路和逻辑传输，并进行对链路与传输特性的总体控制，例如启用逻辑传输加密、调节物理链路上的传输功率或调整逻辑链路的QoS设置。</p><h3 id="基带资源管理器"><a href="#基带资源管理器" class="headerlink" title="基带资源管理器"></a>基带资源管理器</h3><p>基带资源管理器负责对无线媒介的所有访问。它主要有两项功能。它的核心功能是一个调度程序，用于将物理信道上的时间授予所有已协商达成访问协定的实体。另一个主要功能是与这些实体协商访问协定。访问协定实际上是一项承诺，提供必要的特定QoS，以为用户应用提供期望的性能。</p><p>访问协定和调度功能必须考虑所有需要使用 Bluetooth 无线电的行为。例如，这包括已连接设备之间通过逻辑链路和逻辑传输进行正常数据交换，以及使用无线电媒介实现查询、建立连接、变为可发现或可连接，或者在使用AFH模式过程中从未使用的载波中获取的读数。</p><p>在某些情况下，逻辑链路调度会导致从先前使用的物理信道更换为另一物理信道。这可能是因为涉及散射网、定期查询功能或寻呼扫描等。如果物理信道未按时隙对齐，则资源管理器还会考虑原物理信道上的时隙和新物理信道上的时隙之间的重新对齐时间。某些情况会自动对齐时隙，这是因为两个物理信道使用相同的设备时钟作为参考。</p><h3 id="链路控制器"><a href="#链路控制器" class="headerlink" title="链路控制器"></a>链路控制器</h3><p>链路控制器负责 Bluetooth 数据包与数据净荷及物理信道、逻辑传输和逻辑链路相关参数的编码和解码操作。</p><p>链路控制器发出链路控制协议信令（与资源管理器的调度功能紧密结合），用于传达流控制及确认和重传传输请求信号。对这些信号进行翻译是与基带数据包相关联的逻辑传输的特征。链路控制信令的翻译和控制通常与资源管理器的调度程序相关联。</p><h3 id="射频"><a href="#射频" class="headerlink" title="射频"></a>射频</h3><p>射频块负责在物理信道上传输和接收数据包。基带和射频块之间的控制通道让基带功能块可以控制射频功能块的时间和频率载波。射频块可将物理信道和基带上传输的数据流转换成所需格式。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>《低功耗蓝牙智能硬件开发实战》第1.4节 《蓝牙4.0核心架构分析》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;蓝牙4-0核心架构分析&quot;&gt;&lt;a href=&quot;#蓝牙4-0核心架构分析&quot; class=&quot;headerlink&quot; title=&quot;蓝牙4.0核心架构分析&quot;&gt;&lt;/a&gt;蓝牙4.0核心架构分析&lt;/h1&gt;&lt;h2 id=&quot;核心系统架构&quot;&gt;&lt;a href=&quot;#核心系统架构&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.okclouder.cn/2020/08/31/%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>https://www.okclouder.cn/2020/08/31/%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B4%E6%95%B0%E4%B9%8B%E5%92%8C/</id>
    <published>2020-08-31T13:54:09.691Z</published>
    <updated>2020-08-31T13:54:09.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="连续正整数之和"><a href="#连续正整数之和" class="headerlink" title="连续正整数之和"></a>连续正整数之和</h1><p>给定一个正整数，如何判断它是否是一段连续正整数之和？</p><p>比如，给定正整数 15，它可以表示成 15 = 1 + 2 + 3 + 4 + 5，也可以表示成 15 = 7 + 8。</p><p>给定正整数 6，它可以表示成 6 = 1 + 2 + 3。</p><p>那么这样的正整数有什么特征？什么样的数可以表示成连续正整数之和？什么样的数不可以表示成连续正整数之和？</p><p>显然，所有奇数都可以表示成连续正整数之和，比如 n = (n - 1) / 2 + (n + 1) / 2。</p><p>那么偶数呢？</p><p>当一个偶数的形式是 n = 2 ^ k （k &gt;= 1）时，它无法表示成连续正整数之和，比如 2、4、8、16……这样的偶数。其他形式的偶数都可以表示成连续正整数之和。</p><p>在代码中判断时，可以根据按位与的位运算符（&amp;）来判断。</p><p>如果 n 满足</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n &amp; (n - 1) &#x3D;&#x3D; 0</span><br></pre></td></tr></table></figure><p>那么它无法表示成一段连续正整数之和，否则可以表示。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;连续正整数之和&quot;&gt;&lt;a href=&quot;#连续正整数之和&quot; class=&quot;headerlink&quot; title=&quot;连续正整数之和&quot;&gt;&lt;/a&gt;连续正整数之和&lt;/h1&gt;&lt;p&gt;给定一个正整数，如何判断它是否是一段连续正整数之和？&lt;/p&gt;
&lt;p&gt;比如，给定正整数 15，它可以表</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.okclouder.cn/2020/08/31/%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE/"/>
    <id>https://www.okclouder.cn/2020/08/31/%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE/</id>
    <published>2020-08-31T13:54:09.691Z</published>
    <updated>2020-08-31T13:54:09.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="镜像配置"><a href="#镜像配置" class="headerlink" title="镜像配置"></a>镜像配置</h1><p>由于一些网络原因，下载软件和依赖的速度很慢。切换使用淘宝镜像下载。</p><h2 id="阿里云-Maven-镜像"><a href="#阿里云-Maven-镜像" class="headerlink" title="阿里云 Maven 镜像"></a>阿里云 Maven 镜像</h2><p>gradle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    maven &#123;url &#39;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&#39;&#125;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>maven</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;repositories&gt;</span><br><span class="line">    &lt;repository&gt;</span><br><span class="line">        &lt;id&gt;aliyunmaven&lt;&#x2F;id&gt;</span><br><span class="line">        &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;repository&gt;</span><br><span class="line">&lt;&#x2F;repositories&gt;</span><br></pre></td></tr></table></figure><h2 id="淘宝-NPM-镜像"><a href="#淘宝-NPM-镜像" class="headerlink" title="淘宝 NPM 镜像"></a>淘宝 NPM 镜像</h2><p><a href="https://npm.taobao.org/">https://npm.taobao.org/</a></p><p>可以使用 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;镜像配置&quot;&gt;&lt;a href=&quot;#镜像配置&quot; class=&quot;headerlink&quot; title=&quot;镜像配置&quot;&gt;&lt;/a&gt;镜像配置&lt;/h1&gt;&lt;p&gt;由于一些网络原因，下载软件和依赖的速度很慢。切换使用淘宝镜像下载。&lt;/p&gt;
&lt;h2 id=&quot;阿里云-Maven-镜像&quot;&gt;&lt;a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.okclouder.cn/2020/08/31/%E9%9D%A2%E8%AF%95%E9%A2%98%2010.01.%20%E5%90%88%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%9A%84%E6%95%B0%E7%BB%84/"/>
    <id>https://www.okclouder.cn/2020/08/31/%E9%9D%A2%E8%AF%95%E9%A2%98%2010.01.%20%E5%90%88%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%9A%84%E6%95%B0%E7%BB%84/</id>
    <published>2020-08-31T13:54:09.691Z</published>
    <updated>2020-08-31T13:54:09.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面试题-10-01-合并排序的数组"><a href="#面试题-10-01-合并排序的数组" class="headerlink" title="面试题 10.01. 合并排序的数组"></a>面试题 10.01. 合并排序的数组</h1><p>给定两个排序后的数组 A 和 B，其中 A 的末端有足够的缓冲空间容纳 B。 编写一个方法，将 B 合并入 A 并排序。</p><p>初始化 A 和 B 的元素数量分别为 m 和 n。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">A &#x3D; [1,2,3,0,0,0], m &#x3D; 3</span><br><span class="line">B &#x3D; [2,5,6],       n &#x3D; 3</span><br><span class="line"></span><br><span class="line">输出: [1,2,2,3,5,6]</span><br></pre></td></tr></table></figure><p>说明:</p><p>A.length == n + m</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/sorted-merge-lcci">https://leetcode-cn.com/problems/sorted-merge-lcci</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>从后往前合并，因为A有足够的空间容纳B。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> m, <span class="keyword">int</span>[] B, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 从后往前合并，因为A有足够的空间容纳B</span></span><br><span class="line">        <span class="keyword">int</span> indexA = m - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> indexB = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> indexAll = m + n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (indexA &gt;= <span class="number">0</span> &amp;&amp; indexB &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[indexA] &gt; B[indexB]) &#123;</span><br><span class="line">                A[indexAll] = A[indexA];</span><br><span class="line">                indexA--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                A[indexAll] = B[indexB];</span><br><span class="line">                indexB--;</span><br><span class="line">            &#125;</span><br><span class="line">            indexAll--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (indexA &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            A[indexAll] = A[indexA];</span><br><span class="line">            indexA--;</span><br><span class="line">            indexAll--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (indexB &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            A[indexAll] = B[indexB];</span><br><span class="line">            indexB--;</span><br><span class="line">            indexAll--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;面试题-10-01-合并排序的数组&quot;&gt;&lt;a href=&quot;#面试题-10-01-合并排序的数组&quot; class=&quot;headerlink&quot; title=&quot;面试题 10.01. 合并排序的数组&quot;&gt;&lt;/a&gt;面试题 10.01. 合并排序的数组&lt;/h1&gt;&lt;p&gt;给定两个排序后的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.okclouder.cn/2020/08/31/%E6%9C%80%E5%A4%A7%E9%97%B4%E8%B7%9D/"/>
    <id>https://www.okclouder.cn/2020/08/31/%E6%9C%80%E5%A4%A7%E9%97%B4%E8%B7%9D/</id>
    <published>2020-08-31T13:54:09.690Z</published>
    <updated>2020-08-31T13:54:09.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最大间距"><a href="#最大间距" class="headerlink" title="最大间距"></a>最大间距</h1><p>给定一个无序的数组，找出数组在排序之后，相邻元素之间最大的差值。</p><p>如果数组元素个数小于 2，则返回 0。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [3,6,9,1]</span><br><span class="line">输出: 3</span><br><span class="line">解释: 排序后的数组是 [1,3,6,9], 其中相邻元素 (3,6) 和 (6,9) 之间都存在最大差值 3。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [10]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 数组元素个数小于 2，因此返回 0。</span><br></pre></td></tr></table></figure><p>说明:</p><p>你可以假设数组中所有元素都是非负整数，且数值在 32 位有符号整数范围内。<br>请尝试在线性时间复杂度和空间复杂度的条件下解决此问题。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/maximum-gap">https://leetcode-cn.com/problems/maximum-gap</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先按照题意，用排序加上遍历的方法解决问题。虽然不能满足线性时间复杂度和空间复杂度的条件。</p><p>这种解法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximumGap</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span> diff = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> d = nums[i + <span class="number">1</span>] - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (d &gt; diff) &#123;</span><br><span class="line">                diff = d;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> diff;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;最大间距&quot;&gt;&lt;a href=&quot;#最大间距&quot; class=&quot;headerlink&quot; title=&quot;最大间距&quot;&gt;&lt;/a&gt;最大间距&lt;/h1&gt;&lt;p&gt;给定一个无序的数组，找出数组在排序之后，相邻元素之间最大的差值。&lt;/p&gt;
&lt;p&gt;如果数组元素个数小于 2，则返回 0。&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.okclouder.cn/2020/08/31/%E6%9C%80%E5%B0%8F%E6%A0%88/"/>
    <id>https://www.okclouder.cn/2020/08/31/%E6%9C%80%E5%B0%8F%E6%A0%88/</id>
    <published>2020-08-31T13:54:09.690Z</published>
    <updated>2020-08-31T13:54:09.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最小栈"><a href="#最小栈" class="headerlink" title="最小栈"></a>最小栈</h1><p>设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。</p><ul><li>push(x) – 将元素 x 推入栈中。</li><li>pop() – 删除栈顶的元素。</li><li>top() – 获取栈顶元素。</li><li>getMin() – 检索栈中的最小元素。</li></ul><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MinStack minStack &#x3D; new MinStack();</span><br><span class="line">minStack.push(-2);</span><br><span class="line">minStack.push(0);</span><br><span class="line">minStack.push(-3);</span><br><span class="line">minStack.getMin();   --&gt; 返回 -3.</span><br><span class="line">minStack.pop();</span><br><span class="line">minStack.top();      --&gt; 返回 0.</span><br><span class="line">minStack.getMin();   --&gt; 返回 -2.</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/min-stack">https://leetcode-cn.com/problems/min-stack</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p>题目明确要求“在常数时间”解决，所以不能使用循环遍历的方法求最小值。</p><p>因此，需要额外的空间保存最小值。</p><p>这里的方法是使用一个额外的栈来保存每个元素所在位置对应的最小值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; minStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        stack.push(x);</span><br><span class="line">        <span class="keyword">if</span> (minStack.isEmpty()) &#123;</span><br><span class="line">            minStack.push(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Integer peek = minStack.peek();</span><br><span class="line">            <span class="keyword">if</span> (x &lt; peek) &#123;</span><br><span class="line">                <span class="comment">// 如果push的元素小于上一个位置的最小值，那么它自己就是最小值。</span></span><br><span class="line">                <span class="comment">// 极端情况是降序入栈，每个元素都是当前位置的最小值。</span></span><br><span class="line">                minStack.push(x);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 否则把上一个位置的最小值最为当前位置的最小值。</span></span><br><span class="line">                <span class="comment">// 极端情况是升序入栈，最小值是第一个元素。</span></span><br><span class="line">                minStack.push(peek);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stack.pop();</span><br><span class="line">        minStack.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minStack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MinStack obj = new MinStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj.getMin();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;最小栈&quot;&gt;&lt;a href=&quot;#最小栈&quot; class=&quot;headerlink&quot; title=&quot;最小栈&quot;&gt;&lt;/a&gt;最小栈&lt;/h1&gt;&lt;p&gt;设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;push(x) – 将</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.okclouder.cn/2020/08/31/%E6%AF%94%E8%BE%83%E7%89%88%E6%9C%AC%E5%8F%B7/"/>
    <id>https://www.okclouder.cn/2020/08/31/%E6%AF%94%E8%BE%83%E7%89%88%E6%9C%AC%E5%8F%B7/</id>
    <published>2020-08-31T13:54:09.690Z</published>
    <updated>2020-08-31T13:54:09.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="比较版本号"><a href="#比较版本号" class="headerlink" title="比较版本号"></a>比较版本号</h1><p>比较两个版本号 version1 和 version2。<br>如果 version1 &gt; version2 返回 1，如果 version1 &lt; version2 返回 -1， 除此之外返回 0。</p><p>你可以假设版本字符串非空，并且只包含数字和 . 字符。</p><p> . 字符不代表小数点，而是用于分隔数字序列。</p><p>例如，2.5 不是“两个半”，也不是“差一半到三”，而是第二版中的第五个小版本。</p><p>你可以假设版本号的每一级的默认修订版号为 0。例如，版本号 3.4 的第一级（大版本）和第二级（小版本）修订号分别为 3 和 4。其第三级和第四级修订号均为 0。 </p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: version1 &#x3D; &quot;0.1&quot;, version2 &#x3D; &quot;1.1&quot;</span><br><span class="line">输出: -1</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: version1 &#x3D; &quot;1.0.1&quot;, version2 &#x3D; &quot;1&quot;</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: version1 &#x3D; &quot;7.5.2.4&quot;, version2 &#x3D; &quot;7.5.3&quot;</span><br><span class="line">输出: -1</span><br></pre></td></tr></table></figure><p>示例 4：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：version1 &#x3D; &quot;1.01&quot;, version2 &#x3D; &quot;1.001&quot;</span><br><span class="line">输出：0</span><br><span class="line">解释：忽略前导零，“01” 和 “001” 表示相同的数字 “1”。</span><br></pre></td></tr></table></figure><p>示例 5：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：version1 &#x3D; &quot;1.0&quot;, version2 &#x3D; &quot;1.0.0&quot;</span><br><span class="line">输出：0</span><br><span class="line">解释：version1 没有第三级修订号，这意味着它的第三级修订号默认为 “0”。</span><br></pre></td></tr></table></figure><p>提示：</p><p>版本字符串由以点 （.） 分隔的数字字符串组成。这个数字字符串可能有前导零。<br>版本字符串不以点开始或结束，并且其中不会有两个连续的点。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/compare-version-numbers">https://leetcode-cn.com/problems/compare-version-numbers</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>将 2 个版本号按照点号拆分成数组，然后依次比较每一位的大小。如果其中一个版本号比另外一个长，那么就让它与 0 比较。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareVersion</span><span class="params">(String version1, String version2)</span> </span>&#123;</span><br><span class="line">                String[] ver1 = version1.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        String[] ver2 = version2.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> len1 = ver1.length;</span><br><span class="line">        <span class="keyword">int</span> len2 = ver2.length;</span><br><span class="line">        <span class="keyword">int</span> index1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> index2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index1 &lt; len1 &amp;&amp; index2 &lt; len2) &#123;</span><br><span class="line">            String numStr1 = ver1[index1];</span><br><span class="line">            String numStr2 = ver2[index2];</span><br><span class="line">            <span class="keyword">int</span> num1 = Integer.parseInt(numStr1);</span><br><span class="line">            <span class="keyword">int</span> num2 = Integer.parseInt(numStr2);</span><br><span class="line">            <span class="comment">// same version number. continue to next level</span></span><br><span class="line">            <span class="keyword">if</span> (num1 == num2) &#123;</span><br><span class="line">                index1++;</span><br><span class="line">                index2++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (num1 &lt; num2) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// not same length, len1 is longer</span></span><br><span class="line">        <span class="keyword">while</span> (index1 &lt; len1) &#123;</span><br><span class="line">            String numStr1 = ver1[index1];</span><br><span class="line">            <span class="keyword">int</span> num1 = Integer.parseInt(numStr1);</span><br><span class="line">            <span class="keyword">if</span> (num1 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num1 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                index1++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// not same length, len2 is longer</span></span><br><span class="line">        <span class="keyword">while</span> (index2 &lt; len2) &#123;</span><br><span class="line">            String numStr2 = ver2[index2];</span><br><span class="line">            <span class="keyword">int</span> num2 = Integer.parseInt(numStr2);</span><br><span class="line">            <span class="keyword">if</span> (num2 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num2 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                index2++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;比较版本号&quot;&gt;&lt;a href=&quot;#比较版本号&quot; class=&quot;headerlink&quot; title=&quot;比较版本号&quot;&gt;&lt;/a&gt;比较版本号&lt;/h1&gt;&lt;p&gt;比较两个版本号 version1 和 version2。&lt;br&gt;如果 version1 &amp;gt; version2 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.okclouder.cn/2020/08/31/%E7%94%A8%20RxJava%20%E5%AE%9E%E7%8E%B0%20RxBus/"/>
    <id>https://www.okclouder.cn/2020/08/31/%E7%94%A8%20RxJava%20%E5%AE%9E%E7%8E%B0%20RxBus/</id>
    <published>2020-08-31T13:54:09.690Z</published>
    <updated>2020-08-31T13:54:09.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用-RxJava-实现-RxBus"><a href="#用-RxJava-实现-RxBus" class="headerlink" title="用 RxJava 实现 RxBus"></a>用 RxJava 实现 RxBus</h1><p>RxJava 可以用来实现 RxBus，实现事件发送和监听。</p><h2 id="创建-RxBus"><a href="#创建-RxBus" class="headerlink" title="创建 RxBus"></a>创建 RxBus</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxBus</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> RxBus rxBus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Subject&lt;Object&gt; subject = PublishSubject.create().toSerialized();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">RxBus</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RxBus <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rxBus == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (RxBus.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rxBus == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    rxBus = <span class="keyword">new</span> RxBus();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rxBus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        subject.onNext(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">toObservable</span><span class="params">(Class&lt;T&gt; eventType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> subject.ofType(eventType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用双重校验锁（DCL）加上 volatile 关键字的方式实现 RxBus 单例。</p><p>使用 PublishSubject.create().toSerialized() 方法得到一个线程安全的 Subject。</p><p>toSerialized 方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Subject&lt;T&gt; <span class="title">toSerialized</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> SerializedSubject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SerializedSubject&lt;T&gt;(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 RxJava2 中 SerializedSubject 类不再是 public 修饰的，没有对外暴露，而是使用 toSerialized 创建。</p><p>post 方法用来发送事件，它直接调用了 onNext 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    subject.onNext(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>toObservable 用来把事件类型转换为 Observable 类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">toObservable</span><span class="params">(Class&lt;T&gt; eventType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> subject.ofType(eventType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ofType 方法代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public final &lt;U&gt; Observable&lt;U&gt; ofType(final Class&lt;U&gt; clazz) &#123;</span><br><span class="line">    ObjectHelper.requireNonNull(clazz, &quot;clazz is null&quot;);</span><br><span class="line">    return filter(Functions.isInstanceOf(clazz)).cast(clazz);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出先通过 instanceOf 判断是否是指定类型，然后用 filter 过滤指定类型的事件，最后使用 cast 将 Observable 转换为指定类型的 Observable。</p><h2 id="发送事件"><a href="#发送事件" class="headerlink" title="发送事件"></a>发送事件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxBusActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_rx_bus);</span><br><span class="line">        Button btn = findViewById(R.id.rx_btn);</span><br><span class="line">        btn.setOnClickListener(v -&gt; &#123;</span><br><span class="line">            RxBus.getInstance().post(<span class="keyword">new</span> MessageEvent(<span class="string">&quot;用 RxJava 实现 RxBus&quot;</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击按钮时，用调用 post 方法发送事件。</p><h2 id="接收事件"><a href="#接收事件" class="headerlink" title="接收事件"></a>接收事件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxBusFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView text;</span><br><span class="line">    <span class="keyword">private</span> Disposable disposable;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(<span class="meta">@NonNull</span> LayoutInflater inflater, <span class="meta">@Nullable</span> ViewGroup container, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        View view = inflater.inflate(R.layout.fragment_rx_bus, container, <span class="keyword">false</span>);</span><br><span class="line">        text = view.findViewById(R.id.frag_text);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">        disposable = RxBus.getInstance().toObservable(MessageEvent.class).subscribe(messageEvent -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (messageEvent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                text.setText(messageEvent.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        <span class="keyword">if</span> (disposable != <span class="keyword">null</span> &amp;&amp; !disposable.isDisposed()) &#123;</span><br><span class="line">            disposable.dispose();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Fragment 的 onActivityCreated 方法中订阅事件，如果收到事件就改变 textView 文字。</p><h2 id="取消订阅"><a href="#取消订阅" class="headerlink" title="取消订阅"></a>取消订阅</h2><p>为了避免内存泄漏，需要在订阅者的退出回调 onDestroy 中取消事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    <span class="keyword">if</span> (disposable != <span class="keyword">null</span> &amp;&amp; !disposable.isDisposed()) &#123;</span><br><span class="line">        disposable.dispose();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>为了实现事件的发送和订阅，可以使用 RxJava 的 PublishSubject.create().toSerialized() 方法得到一个线程安全的 Subject，然后分别在合适的地方订阅（subject subscribe）和发送（subject onNext）事件。为了避免内存泄漏，需要在合适的地方取消订阅（dispose）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;用-RxJava-实现-RxBus&quot;&gt;&lt;a href=&quot;#用-RxJava-实现-RxBus&quot; class=&quot;headerlink&quot; title=&quot;用 RxJava 实现 RxBus&quot;&gt;&lt;/a&gt;用 RxJava 实现 RxBus&lt;/h1&gt;&lt;p&gt;RxJava 可以用</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.okclouder.cn/2020/08/31/%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/"/>
    <id>https://www.okclouder.cn/2020/08/31/%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</id>
    <published>2020-08-31T13:54:09.690Z</published>
    <updated>2020-08-31T13:54:09.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相交链表"><a href="#相交链表" class="headerlink" title="相交链表"></a>相交链表</h1><p>编写一个程序，找到两个单链表相交的起始节点。</p><p>如下面的两个链表：</p><p>在节点 c1 开始相交。</p><p> </p><p>示例 1：</p><p>输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3<br>输出：Reference of the node with value = 8<br>输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。 </p><p>示例 2：</p><p>输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1<br>输出：Reference of the node with value = 2<br>输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。 </p><p>示例 3：</p><p>输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2<br>输出：null<br>输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。<br>解释：这两个链表不相交，因此返回 null。 </p><p>注意：</p><p>如果两个链表没有交点，返回 null.<br>在返回结果后，两个链表仍须保持原有的结构。<br>可假定整个链表结构中没有循环。<br>程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists">https://leetcode-cn.com/problems/intersection-of-two-linked-lists</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p>题目要求“尽量满足 O(n) 时间复杂度”，也就是说不能双重循环一个个比对节点。</p><p>解答思路是从 2 个链表中较短的那一个链表的开始位置同时遍历，一旦发现指向相同节点就说明链表相交。</p><p>要达成同时遍历的效果，必须让较长的链表先走多余的那一段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (headA == headB) &#123;</span><br><span class="line">            <span class="keyword">return</span> headA;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (headA == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (headB == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode lastNode = headA;</span><br><span class="line">        <span class="keyword">int</span> lenA = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (lastNode.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            lastNode = lastNode.next;</span><br><span class="line">            lenA++;</span><br><span class="line">        &#125;</span><br><span class="line">        lastNode = headB;</span><br><span class="line">        <span class="keyword">int</span> lenB = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (lastNode.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            lastNode = lastNode.next;</span><br><span class="line">            lenB++;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode realStart;</span><br><span class="line">        ListNode otherStart;</span><br><span class="line">        <span class="keyword">if</span> (lenA &lt; lenB) &#123;</span><br><span class="line">            <span class="comment">// let B go first</span></span><br><span class="line">            realStart = headB;</span><br><span class="line">            otherStart = headA;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lenB - lenA &amp;&amp; realStart != <span class="keyword">null</span>; ++i) &#123;</span><br><span class="line">                realStart = realStart.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// let A go first</span></span><br><span class="line">            realStart = headA;</span><br><span class="line">            otherStart = headB;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lenA - lenB &amp;&amp; realStart != <span class="keyword">null</span>; ++i) &#123;</span><br><span class="line">                realStart = realStart.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// compare one by one</span></span><br><span class="line">        <span class="keyword">while</span> (realStart != <span class="keyword">null</span> &amp;&amp; otherStart != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (realStart == otherStart) &#123;</span><br><span class="line">                <span class="keyword">return</span> realStart;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                realStart = realStart.next;</span><br><span class="line">                otherStart = otherStart.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;相交链表&quot;&gt;&lt;a href=&quot;#相交链表&quot; class=&quot;headerlink&quot; title=&quot;相交链表&quot;&gt;&lt;/a&gt;相交链表&lt;/h1&gt;&lt;p&gt;编写一个程序，找到两个单链表相交的起始节点。&lt;/p&gt;
&lt;p&gt;如下面的两个链表：&lt;/p&gt;
&lt;p&gt;在节点 c1 开始相交。&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.okclouder.cn/2020/08/31/%E5%88%86%E7%B3%96%E6%9E%9C%20II/"/>
    <id>https://www.okclouder.cn/2020/08/31/%E5%88%86%E7%B3%96%E6%9E%9C%20II/</id>
    <published>2020-08-31T13:54:09.689Z</published>
    <updated>2020-08-31T13:54:09.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分糖果-II"><a href="#分糖果-II" class="headerlink" title="分糖果 II"></a>分糖果 II</h1><p>排排坐，分糖果。</p><p>我们买了一些糖果 candies，打算把它们分给排好队的 n = num_people 个小朋友。</p><p>给第一个小朋友 1 颗糖果，第二个小朋友 2 颗，依此类推，直到给最后一个小朋友 n 颗糖果。</p><p>然后，我们再回到队伍的起点，给第一个小朋友 n + 1 颗糖果，第二个小朋友 n + 2 颗，依此类推，直到给最后一个小朋友 2 * n 颗糖果。</p><p>重复上述过程（每次都比上一次多给出一颗糖果，当到达队伍终点后再次从队伍起点开始），直到我们分完所有的糖果。注意，就算我们手中的剩下糖果数不够（不比前一次发出的糖果多），这些糖果也会全部发给当前的小朋友。</p><p>返回一个长度为 num_people、元素之和为 candies 的数组，以表示糖果的最终分发情况（即 ans[i] 表示第 i 个小朋友分到的糖果数）。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：candies &#x3D; 7, num_people &#x3D; 4</span><br><span class="line">输出：[1,2,3,1]</span><br><span class="line">解释：</span><br><span class="line">第一次，ans[0] +&#x3D; 1，数组变为 [1,0,0,0]。</span><br><span class="line">第二次，ans[1] +&#x3D; 2，数组变为 [1,2,0,0]。</span><br><span class="line">第三次，ans[2] +&#x3D; 3，数组变为 [1,2,3,0]。</span><br><span class="line">第四次，ans[3] +&#x3D; 1（因为此时只剩下 1 颗糖果），最终数组变为 [1,2,3,1]。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：candies &#x3D; 10, num_people &#x3D; 3</span><br><span class="line">输出：[5,2,3]</span><br><span class="line">解释：</span><br><span class="line">第一次，ans[0] +&#x3D; 1，数组变为 [1,0,0]。</span><br><span class="line">第二次，ans[1] +&#x3D; 2，数组变为 [1,2,0]。</span><br><span class="line">第三次，ans[2] +&#x3D; 3，数组变为 [1,2,3]。</span><br><span class="line">第四次，ans[0] +&#x3D; 4，最终数组变为 [5,2,3]。</span><br></pre></td></tr></table></figure><p>提示：</p><p>1 &lt;= candies &lt;= 10^9<br>1 &lt;= num_people &lt;= 1000</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/distribute-candies-to-people">https://leetcode-cn.com/problems/distribute-candies-to-people</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>暴力解法。按照队伍顺序循环发糖果。</p><p>注意：这一题有时间复杂度更好的解法，具体可以看题解。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] distributeCandies(<span class="keyword">int</span> candies, <span class="keyword">int</span> num_people) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[num_people];</span><br><span class="line">        <span class="keyword">int</span> targetCandy = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (candies &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_people &amp;&amp; candies &gt; <span class="number">0</span>; ++i) &#123;</span><br><span class="line">                <span class="keyword">int</span> realCandy = targetCandy &gt; candies ? candies: targetCandy;</span><br><span class="line">                result[i] += realCandy;</span><br><span class="line">                candies -= realCandy; </span><br><span class="line">                targetCandy++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分糖果-II&quot;&gt;&lt;a href=&quot;#分糖果-II&quot; class=&quot;headerlink&quot; title=&quot;分糖果 II&quot;&gt;&lt;/a&gt;分糖果 II&lt;/h1&gt;&lt;p&gt;排排坐，分糖果。&lt;/p&gt;
&lt;p&gt;我们买了一些糖果 candies，打算把它们分给排好队的 n = num_p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.okclouder.cn/2020/08/31/%E5%92%8C%E4%B8%BA%E9%9B%B6%E7%9A%84N%E4%B8%AA%E5%94%AF%E4%B8%80%E6%95%B4%E6%95%B0/"/>
    <id>https://www.okclouder.cn/2020/08/31/%E5%92%8C%E4%B8%BA%E9%9B%B6%E7%9A%84N%E4%B8%AA%E5%94%AF%E4%B8%80%E6%95%B4%E6%95%B0/</id>
    <published>2020-08-31T13:54:09.689Z</published>
    <updated>2020-08-31T13:54:09.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="和为零的N个唯一整数"><a href="#和为零的N个唯一整数" class="headerlink" title="和为零的N个唯一整数"></a>和为零的N个唯一整数</h1><p>给你一个整数 n，请你返回 任意 一个由 n 个 各不相同 的整数组成的数组，并且这 n 个数相加和为 0 。</p><p> </p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n &#x3D; 5</span><br><span class="line">输出：[-7,-1,1,3,4]</span><br><span class="line">解释：这些数组也是正确的 [-5,-1,1,2,3]，[-3,-1,2,-2,4]。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n &#x3D; 3</span><br><span class="line">输出：[-1,0,1]</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n &#x3D; 1</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure><p>提示：</p><p>1 &lt;= n &lt;= 1000</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/find-n-unique-integers-sum-up-to-zero">https://leetcode-cn.com/problems/find-n-unique-integers-sum-up-to-zero</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>如果 n = 1，返回 0。</p><p>如果 n 是偶数，返回成对的整数，比如 1/-1。</p><p>如果 n 是奇数，返回 0 和成对的整数，比如 0、1/-1。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sumZero(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((n &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> val = i + <span class="number">1</span>;</span><br><span class="line">                result[i] = val;</span><br><span class="line">                result[i + <span class="number">1</span>] = -val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">            result[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i += <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> val = i + <span class="number">1</span>;</span><br><span class="line">                result[i] = val;</span><br><span class="line">                result[i + <span class="number">1</span>] = -val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;和为零的N个唯一整数&quot;&gt;&lt;a href=&quot;#和为零的N个唯一整数&quot; class=&quot;headerlink&quot; title=&quot;和为零的N个唯一整数&quot;&gt;&lt;/a&gt;和为零的N个唯一整数&lt;/h1&gt;&lt;p&gt;给你一个整数 n，请你返回 任意 一个由 n 个 各不相同 的整数组成的数组</summary>
      
    
    
    
    
  </entry>
  
</feed>
